basePath: /api
definitions:
  dto.CompressUnixFiles:
    properties:
      compressionType:
        type: string
      destinationPath:
        type: string
      sourcePaths:
        items:
          type: string
        type: array
    type: object
  dto.CopyUnixFile:
    properties:
      destinationPath:
        type: string
      shouldOverwrite:
        type: boolean
      sourcePath:
        type: string
    type: object
  dto.CreateAccount:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.CreateCron:
    properties:
      command:
        type: string
      comment:
        type: string
      schedule:
        type: string
    type: object
  dto.CreateCustomService:
    properties:
      autoCreateMapping:
        type: boolean
      autoRestart:
        type: boolean
      autoStart:
        type: boolean
      envs:
        items:
          type: string
        type: array
      execUser:
        type: string
      logErrorPath:
        type: string
      logOutputPath:
        type: string
      maxStartRetries:
        type: integer
      name:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      postStartCmdSteps:
        items:
          type: string
        type: array
      postStopCmdSteps:
        items:
          type: string
        type: array
      preStartCmdSteps:
        items:
          type: string
        type: array
      preStopCmdSteps:
        items:
          type: string
        type: array
      startCmd:
        type: string
      stopCmdSteps:
        items:
          type: string
        type: array
      timeoutStartSecs:
        type: integer
      type:
        type: string
      version:
        type: string
      workingDirectory:
        type: string
    type: object
  dto.CreateDatabase:
    properties:
      dbName:
        type: string
    type: object
  dto.CreateDatabaseUser:
    properties:
      dbName:
        type: string
      password:
        type: string
      privileges:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  dto.CreateInstallableService:
    properties:
      autoCreateMapping:
        type: boolean
      autoRestart:
        type: boolean
      autoStart:
        type: boolean
      envs:
        items:
          type: string
        type: array
      maxStartRetries:
        type: integer
      name:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      startupFile:
        type: string
      timeoutStartSecs:
        type: integer
      version:
        type: string
    type: object
  dto.CreateMapping:
    properties:
      hostname:
        type: string
      matchPattern:
        type: string
      path:
        type: string
      targetHttpResponseCode:
        type: integer
      targetType:
        type: string
      targetValue:
        type: string
    type: object
  dto.CreateSecureAccessPublicKey:
    properties:
      accountId:
        type: integer
      content:
        type: string
      name:
        type: string
    type: object
  dto.CreateSessionToken:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  dto.CreateSslPair:
    properties:
      certificate:
        $ref: '#/definitions/entity.SslCertificate'
      key:
        type: string
      virtualHostsHostnames:
        items:
          type: string
        type: array
    type: object
  dto.CreateUnixFile:
    properties:
      filePath:
        type: string
      mimeType:
        type: string
      permissions:
        type: string
    type: object
  dto.CreateVirtualHost:
    properties:
      hostname:
        type: string
      parentHostname:
        type: string
      type:
        type: string
    type: object
  dto.DeleteSslPairVhosts:
    properties:
      sslPairId:
        type: string
      virtualHostsHostnames:
        items:
          type: string
        type: array
    type: object
  dto.ExtractUnixFiles:
    properties:
      destinationPath:
        type: string
      sourcePath:
        type: string
    type: object
  dto.InstallMarketplaceCatalogItem:
    properties:
      dataFields:
        items:
          $ref: '#/definitions/valueObject.MarketplaceInstallableItemDataField'
        type: array
      hostname:
        type: string
      id:
        type: integer
      slug:
        type: string
      urlPath:
        type: string
    type: object
  dto.InstalledServiceWithMetrics:
    properties:
      autoRestart:
        type: boolean
      autoStart:
        type: boolean
      createdAt:
        type: integer
      envs:
        items:
          type: string
        type: array
      execUser:
        type: string
      logErrorPath:
        type: string
      logOutputPath:
        type: string
      maxStartRetries:
        type: integer
      metrics:
        $ref: '#/definitions/valueObject.ServiceMetrics'
      name:
        type: string
      nature:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      postStartCmdSteps:
        items:
          type: string
        type: array
      postStopCmdSteps:
        items:
          type: string
        type: array
      preStartCmdSteps:
        items:
          type: string
        type: array
      preStopCmdSteps:
        items:
          type: string
        type: array
      startCmd:
        type: string
      startupFile:
        type: string
      status:
        type: string
      stopCmdSteps:
        items:
          type: string
        type: array
      timeoutStartSecs:
        type: integer
      type:
        type: string
      updatedAt:
        type: integer
      version:
        type: string
      workingDirectory:
        type: string
    type: object
  dto.Pagination:
    properties:
      itemsPerPage:
        type: integer
      itemsTotal:
        type: integer
      lastSeenId:
        type: string
      pageNumber:
        type: integer
      pagesTotal:
        type: integer
      sortBy:
        type: string
      sortDirection:
        type: string
    type: object
  dto.ReadAccountsResponse:
    properties:
      accounts:
        items:
          $ref: '#/definitions/entity.Account'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadCronsResponse:
    properties:
      crons:
        items:
          $ref: '#/definitions/entity.Cron'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadInstallableServicesItemsResponse:
    properties:
      installableServices:
        items:
          $ref: '#/definitions/entity.InstallableService'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadInstalledServicesItemsResponse:
    properties:
      installedServices:
        items:
          $ref: '#/definitions/entity.InstalledService'
        type: array
      installedServicesWithMetrics:
        items:
          $ref: '#/definitions/dto.InstalledServiceWithMetrics'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadMarketplaceCatalogItemsResponse:
    properties:
      marketplaceCatalogItems:
        items:
          $ref: '#/definitions/entity.MarketplaceCatalogItem'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadMarketplaceInstalledItemsResponse:
    properties:
      marketplaceInstalledItems:
        items:
          $ref: '#/definitions/entity.MarketplaceInstalledItem'
        type: array
      pagination:
        $ref: '#/definitions/dto.Pagination'
    type: object
  dto.ReadScheduledTasksResponse:
    properties:
      pagination:
        $ref: '#/definitions/dto.Pagination'
      tasks:
        items:
          $ref: '#/definitions/entity.ScheduledTask'
        type: array
    type: object
  dto.UpdateAccount:
    properties:
      accountId:
        type: integer
      password:
        type: string
      shouldUpdateApiKey:
        type: boolean
    type: object
  dto.UpdateCron:
    properties:
      command:
        type: string
      comment:
        type: string
      id:
        type: integer
      schedule:
        type: string
    type: object
  dto.UpdatePhpConfigs:
    properties:
      hostname:
        type: string
      modules:
        items:
          $ref: '#/definitions/entity.PhpModule'
        type: array
      settings:
        items:
          $ref: '#/definitions/entity.PhpSetting'
        type: array
      version:
        type: string
    type: object
  dto.UpdateScheduledTask:
    properties:
      runAt:
        type: integer
      status:
        type: string
      taskId:
        type: integer
    type: object
  dto.UpdateService:
    properties:
      autoRestart:
        type: boolean
      autoStart:
        type: boolean
      envs:
        items:
          type: string
        type: array
      execUser:
        type: string
      logErrorPath:
        type: string
      logOutputPath:
        type: string
      maxStartRetries:
        type: integer
      name:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      postStartCmdSteps:
        items:
          type: string
        type: array
      postStopCmdSteps:
        items:
          type: string
        type: array
      preStartCmdSteps:
        items:
          type: string
        type: array
      preStopCmdSteps:
        items:
          type: string
        type: array
      startCmd:
        type: string
      startupFile:
        type: string
      status:
        type: string
      stopCmdSteps:
        items:
          type: string
        type: array
      timeoutStartSecs:
        type: integer
      type:
        type: string
      version:
        type: string
      workingDirectory:
        type: string
    type: object
  dto.UpdateUnixFiles:
    properties:
      destinationPath:
        type: string
      encodedContent:
        type: string
      permissions:
        type: string
      sourcePaths:
        items:
          type: string
        type: array
    type: object
  dto.VirtualHostWithMappings:
    properties:
      hostname:
        type: string
      mappings:
        items:
          $ref: '#/definitions/entity.Mapping'
        type: array
      parentHostname:
        type: string
      rootDirectory:
        type: string
      type:
        type: string
    type: object
  entity.AccessToken:
    properties:
      expiresIn:
        type: integer
      tokenStr:
        type: string
      type:
        type: string
    type: object
  entity.Account:
    properties:
      createdAt:
        type: integer
      groupId:
        type: integer
      homeDirectory:
        type: string
      id:
        type: integer
      secureAccessPublicKeys:
        items:
          $ref: '#/definitions/entity.SecureAccessPublicKey'
        type: array
      updatedAt:
        type: integer
      username:
        type: string
    type: object
  entity.Cron:
    properties:
      command:
        type: string
      comment:
        type: string
      id:
        type: integer
      schedule:
        type: string
    type: object
  entity.Database:
    properties:
      name:
        type: string
      size:
        type: integer
      type:
        type: string
      users:
        items:
          $ref: '#/definitions/entity.DatabaseUser'
        type: array
    type: object
  entity.DatabaseUser:
    properties:
      dbName:
        type: string
      dbType:
        type: string
      privileges:
        items:
          type: string
        type: array
      username:
        type: string
    type: object
  entity.InstallableService:
    properties:
      avatarUrl:
        type: string
      description:
        type: string
      envs:
        items:
          type: string
        type: array
      estimatedSizeBytes:
        type: integer
      execUser:
        type: string
      logErrorPath:
        type: string
      logOutputPath:
        type: string
      manifestVersion:
        type: string
      name:
        type: string
      nature:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      startCmd:
        type: string
      startupFile:
        type: string
      type:
        type: string
      versions:
        items:
          type: string
        type: array
      workingDirectory:
        type: string
    type: object
  entity.InstalledService:
    properties:
      autoRestart:
        type: boolean
      autoStart:
        type: boolean
      createdAt:
        type: integer
      envs:
        items:
          type: string
        type: array
      execUser:
        type: string
      logErrorPath:
        type: string
      logOutputPath:
        type: string
      maxStartRetries:
        type: integer
      name:
        type: string
      nature:
        type: string
      portBindings:
        items:
          $ref: '#/definitions/valueObject.PortBinding'
        type: array
      postStartCmdSteps:
        items:
          type: string
        type: array
      postStopCmdSteps:
        items:
          type: string
        type: array
      preStartCmdSteps:
        items:
          type: string
        type: array
      preStopCmdSteps:
        items:
          type: string
        type: array
      startCmd:
        type: string
      startupFile:
        type: string
      status:
        type: string
      stopCmdSteps:
        items:
          type: string
        type: array
      timeoutStartSecs:
        type: integer
      type:
        type: string
      updatedAt:
        type: integer
      version:
        type: string
      workingDirectory:
        type: string
    type: object
  entity.Mapping:
    properties:
      id:
        type: integer
      matchPattern:
        type: string
      path:
        type: string
      targetHttpResponseCode:
        type: integer
      targetType:
        type: string
      targetValue:
        type: string
    type: object
  entity.MarketplaceCatalogItem:
    properties:
      avatarUrl:
        type: string
      dataFields:
        items:
          $ref: '#/definitions/valueObject.MarketplaceCatalogItemDataField'
        type: array
      description:
        type: string
      estimatedSizeBytes:
        type: integer
      id:
        type: integer
      manifestVersion:
        type: string
      mappings:
        items:
          $ref: '#/definitions/valueObject.MarketplaceItemMapping'
        type: array
      name:
        type: string
      screenshotUrls:
        items:
          type: string
        type: array
      services:
        items:
          $ref: '#/definitions/valueObject.ServiceNameWithVersion'
        type: array
      slugs:
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  entity.MarketplaceInstalledItem:
    properties:
      avatarUrl:
        type: string
      createdAt:
        type: integer
      hostname:
        type: string
      id:
        type: integer
      installDirectory:
        type: string
      installUuid:
        type: string
      mappings:
        items:
          $ref: '#/definitions/entity.Mapping'
        type: array
      name:
        type: string
      services:
        items:
          $ref: '#/definitions/valueObject.ServiceNameWithVersion'
        type: array
      type:
        type: string
      updatedAt:
        type: integer
      urlPath:
        type: string
    type: object
  entity.O11yOverview:
    properties:
      currentUsage:
        $ref: '#/definitions/valueObject.CurrentResourceUsage'
      hostname:
        type: string
      publicIp:
        type: string
      specs:
        $ref: '#/definitions/valueObject.HardwareSpecs'
      uptimeRelative:
        type: string
      uptimeSecs:
        type: integer
    type: object
  entity.PhpConfigs:
    properties:
      hostname:
        type: string
      modules:
        items:
          $ref: '#/definitions/entity.PhpModule'
        type: array
      settings:
        items:
          $ref: '#/definitions/entity.PhpSetting'
        type: array
      version:
        $ref: '#/definitions/entity.PhpVersion'
    type: object
  entity.PhpModule:
    properties:
      name:
        type: string
      status:
        type: boolean
    type: object
  entity.PhpSetting:
    properties:
      name:
        type: string
      options:
        items:
          type: string
        type: array
      type:
        type: string
      value:
        type: string
    type: object
  entity.PhpVersion:
    properties:
      options:
        items:
          type: string
        type: array
      value:
        type: string
    type: object
  entity.ScheduledTask:
    properties:
      command:
        type: string
      createdAt:
        type: integer
      elapsedSecs:
        type: integer
      err:
        type: string
      finishedAt:
        type: integer
      id:
        type: integer
      name:
        type: string
      output:
        type: string
      runAt:
        type: integer
      startedAt:
        type: integer
      status:
        type: string
      tags:
        items:
          type: string
        type: array
      timeoutSecs:
        type: integer
      updatedAt:
        type: integer
    type: object
  entity.SecureAccessPublicKey:
    properties:
      accountId:
        type: integer
      createdAt:
        type: integer
      fingerprint:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: integer
    type: object
  entity.SslCertificate:
    properties:
      altNames:
        items:
          type: string
        type: array
      certificateAuthority:
        type: string
      certificateContent:
        type: string
      commonName:
        type: string
      expiresAt:
        type: integer
      id:
        type: string
      issuedAt:
        type: integer
    type: object
  entity.SslPair:
    properties:
      certificate:
        $ref: '#/definitions/entity.SslCertificate'
      chainCertificates:
        items:
          $ref: '#/definitions/entity.SslCertificate'
        type: array
      key:
        type: string
      sslPairId:
        type: string
      virtualHostsHostnames:
        items:
          type: string
        type: array
    type: object
  entity.UnixFile:
    properties:
      content:
        type: string
      extension:
        type: string
      gid:
        type: integer
      group:
        type: string
      mimeType:
        type: string
      name:
        type: string
      owner:
        type: string
      path:
        type: string
      permissions:
        type: string
      size:
        type: integer
      uid:
        type: integer
      updatedAt:
        type: integer
    type: object
  entity.VirtualHost:
    properties:
      hostname:
        type: string
      parentHostname:
        type: string
      rootDirectory:
        type: string
      type:
        type: string
    type: object
  valueObject.CurrentResourceUsage:
    properties:
      cpuUsagePercent:
        type: number
      cpuUsagePercentStr:
        type: string
      memUsagePercent:
        type: number
      memUsagePercentStr:
        type: string
      storageUsage:
        type: number
      storageUsagePercentStr:
        type: string
    type: object
  valueObject.HardwareSpecs:
    properties:
      cpuCores:
        type: number
      cpuFrequency:
        type: number
      cpuModel:
        type: string
      memoryTotal:
        type: integer
      storageTotal:
        type: integer
    type: object
  valueObject.MarketplaceCatalogItemDataField:
    properties:
      defaultValue:
        type: string
      isRequired:
        type: boolean
      label:
        type: string
      name:
        type: string
      options:
        items:
          type: string
        type: array
      specificType:
        type: string
      type:
        type: string
    type: object
  valueObject.MarketplaceInstallableItemDataField:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  valueObject.MarketplaceItemMapping:
    properties:
      matchPattern:
        type: string
      path:
        type: string
      targetHttpResponseCode:
        type: integer
      targetType:
        type: string
      targetValue:
        type: string
    type: object
  valueObject.PortBinding:
    properties:
      port:
        type: integer
      protocol:
        type: string
    type: object
  valueObject.ServiceMetrics:
    properties:
      cpuUsagePercent:
        type: number
      memUsagePercent:
        type: number
      pids:
        items:
          type: integer
        type: array
      uptimeSecs:
        type: integer
    type: object
  valueObject.ServiceNameWithVersion:
    properties:
      name:
        type: string
      version:
        type: string
    type: object
host: localhost:1618
info:
  contact:
    email: eng+swagger@goinfinite.net
    name: Infinite Engineering
    url: https://goinfinite.net/
  description: Infinite OS API
  license:
    name: Eclipse Public License v2.0
    url: https://www.eclipse.org/legal/epl-2.0/
  termsOfService: https://goinfinite.net/tos/
  title: OsApi
  version: 0.1.5
paths:
  /v1/account/:
    get:
      consumes:
      - application/json
      description: List accounts.
      parameters:
      - description: Id
        in: query
        name: id
        type: string
      - description: Username
        in: query
        name: username
        type: string
      - description: ShouldIncludeSecureAccessPublicKeys (only works if OpenSSH service
          is installed)
        in: query
        name: shouldIncludeSecureAccessPublicKeys
        type: boolean
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadAccountsResponse'
      security:
      - Bearer: []
      summary: ReadAccounts
      tags:
      - account
    post:
      consumes:
      - application/json
      description: Create a new account.
      parameters:
      - description: All props are required.
        in: body
        name: createAccountDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccount'
      produces:
      - application/json
      responses:
        "201":
          description: AccountCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateAccount
      tags:
      - account
    put:
      consumes:
      - application/json
      description: Update an account.
      parameters:
      - description: Only id or username is required.
        in: body
        name: updateDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAccount'
      produces:
      - application/json
      responses:
        "200":
          description: '''AccountUpdated'' message or new API key in string format'
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateAccount
      tags:
      - account
  /v1/account/{accountId}/:
    delete:
      consumes:
      - application/json
      description: Delete an account.
      parameters:
      - description: AccountId to delete.
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: AccountDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteAccount
      tags:
      - account
  /v1/account/secure-access-public-key/:
    post:
      consumes:
      - application/json
      description: Create a new secure access public key.
      parameters:
      - description: '''name'' is optional. Will only become required if there is
          no name in ''content''. If the ''name'' is provided, it will overwrite the
          name in the ''content''.'
        in: body
        name: createSecureAccessPublicKey
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSecureAccessPublicKey'
      produces:
      - application/json
      responses:
        "201":
          description: SecureAccessPublicKeyCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateSecureAccessPublicKey
      tags:
      - account
  /v1/account/secure-access-public-key/{secureAccessPublicKeyId}/:
    delete:
      consumes:
      - application/json
      description: Delete a secure access public key.
      parameters:
      - description: SecureAccessPublicKeyId to delete.
        in: path
        name: secureAccessPublicKeyId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: SecureAccessPublicKeyDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteSecureAccessPublicKey
      tags:
      - account
  /v1/auth/login/:
    post:
      consumes:
      - application/json
      description: Create a new session token with the provided credentials.
      parameters:
      - description: CreateSessionToken
        in: body
        name: createSessionToken
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSessionToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.AccessToken'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: CreateSessionTokenWithCredentials
      tags:
      - auth
  /v1/cron/:
    get:
      consumes:
      - application/json
      description: List crons.
      parameters:
      - description: Id
        in: query
        name: id
        type: integer
      - description: Comment
        in: query
        name: comment
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadCronsResponse'
      security:
      - Bearer: []
      summary: ReadCrons
      tags:
      - cron
    post:
      consumes:
      - application/json
      description: Create a new cron.
      parameters:
      - description: comment is optional.
        in: body
        name: createCronDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCron'
      produces:
      - application/json
      responses:
        "201":
          description: CronCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateCron
      tags:
      - cron
    put:
      consumes:
      - application/json
      description: Update a cron.
      parameters:
      - description: Only id is required.
        in: body
        name: updateCronDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCron'
      produces:
      - application/json
      responses:
        "200":
          description: CronUpdated message
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateCron
      tags:
      - cron
  /v1/cron/{cronId}/:
    delete:
      consumes:
      - application/json
      description: Delete a cron.
      parameters:
      - description: CronId to delete.
        in: path
        name: cronId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CronDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteCron
      tags:
      - cron
  /v1/database/{dbType}/:
    get:
      consumes:
      - application/json
      description: List databases names, users and sizes.
      parameters:
      - description: DatabaseType (like mysql, postgres)
        in: path
        name: dbType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Database'
            type: array
      security:
      - Bearer: []
      summary: GetDatabases
      tags:
      - database
    post:
      consumes:
      - application/json
      description: Create a new database.
      parameters:
      - description: DatabaseType (like mysql, postgres)
        in: path
        name: dbType
        required: true
        type: string
      - description: All props are required.
        in: body
        name: createDatabaseDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDatabase'
      produces:
      - application/json
      responses:
        "201":
          description: DatabaseCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateDatabase
      tags:
      - database
  /v1/database/{dbType}/{dbName}/:
    delete:
      consumes:
      - application/json
      description: Delete a database.
      parameters:
      - description: DatabaseType (like mysql, postgres)
        in: path
        name: dbType
        required: true
        type: string
      - description: DatabaseName
        in: path
        name: dbName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: DatabaseDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteDatabase
      tags:
      - database
  /v1/database/{dbType}/{dbName}/user/:
    post:
      consumes:
      - application/json
      description: Create a new database user.
      parameters:
      - description: DatabaseType (like mysql, postgres)
        in: path
        name: dbType
        required: true
        type: string
      - description: DatabaseName
        in: path
        name: dbName
        required: true
        type: string
      - description: privileges is optional. When not provided, privileges will be
          'ALL'.
        in: body
        name: createDatabaseUserDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDatabaseUser'
      produces:
      - application/json
      responses:
        "201":
          description: DatabaseUserCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateDatabaseUser
      tags:
      - database
  /v1/database/{dbType}/{dbName}/user/{dbUser}/:
    delete:
      consumes:
      - application/json
      description: Delete a database user.
      parameters:
      - description: DatabaseType (like mysql, postgres)
        in: path
        name: dbType
        required: true
        type: string
      - description: DatabaseName
        in: path
        name: dbName
        required: true
        type: string
      - description: DatabaseUsername to delete.
        in: path
        name: dbUser
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: DatabaseUserDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteDatabaseUser
      tags:
      - database
  /v1/files/:
    get:
      consumes:
      - application/json
      description: List dir/files.
      parameters:
      - description: SourcePath
        in: query
        name: sourcePath
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.UnixFile'
            type: array
      security:
      - Bearer: []
      summary: ReadFiles
      tags:
      - files
    post:
      consumes:
      - application/json
      description: Create a new dir/file.
      parameters:
      - description: permissions is optional. When not provided, permissions will
          be '644' for files and '755' for directories.
        in: body
        name: createFileDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUnixFile'
      produces:
      - application/json
      responses:
        "201":
          description: FileCreated/DirectoryCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateNewFile
      tags:
      - files
    put:
      consumes:
      - application/json
      description: Move a dir/file, update name and/or permissions (Only sourcePath
        is required).
      parameters:
      - description: Only sourcePaths are required.
        in: body
        name: updateUnixFilesDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUnixFiles'
      produces:
      - application/json
      responses:
        "200":
          description: FileUpdated
          schema:
            type: object
        "207":
          description: FilesArePartialUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateFile
      tags:
      - files
  /v1/files/compress/:
    post:
      consumes:
      - application/json
      description: Compress directories and files.
      parameters:
      - description: All props are required.
        in: body
        name: compressFilesDto
        required: true
        schema:
          $ref: '#/definitions/dto.CompressUnixFiles'
      produces:
      - application/json
      responses:
        "200":
          description: FilesCompressed
          schema:
            type: object
        "207":
          description: FilesArePartialCompressed
          schema:
            type: object
      security:
      - Bearer: []
      summary: CompressFiles
      tags:
      - files
  /v1/files/copy/:
    post:
      consumes:
      - application/json
      description: Copy a dir/file.
      parameters:
      - description: All props are required.
        in: body
        name: copyFileDto
        required: true
        schema:
          $ref: '#/definitions/dto.CopyUnixFile'
      produces:
      - application/json
      responses:
        "201":
          description: FileCopied
          schema:
            type: object
      security:
      - Bearer: []
      summary: CopyFile
      tags:
      - files
  /v1/files/delete/:
    put:
      consumes:
      - application/json
      description: Delete one or more directories/files.
      parameters:
      - description: FilePaths to deleted.
        in: body
        name: sourcePaths
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: FilesDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteFiles
      tags:
      - files
  /v1/files/download/:
    get:
      consumes:
      - application/json
      description: Download a file.
      parameters:
      - description: SourcePath
        in: query
        name: sourcePath
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
      security:
      - Bearer: []
      summary: DownloadFile
      tags:
      - files
  /v1/files/extract/:
    put:
      consumes:
      - application/json
      description: Extract directories and files.
      parameters:
      - description: All props are required.
        in: body
        name: extractFilesDto
        required: true
        schema:
          $ref: '#/definitions/dto.ExtractUnixFiles'
      produces:
      - application/json
      responses:
        "200":
          description: FilesExtracted
          schema:
            type: object
      security:
      - Bearer: []
      summary: ExtractFiles
      tags:
      - files
  /v1/files/upload/:
    post:
      consumes:
      - multipart/form-data
      description: Upload files.
      parameters:
      - description: DestinationPath
        in: formData
        name: destinationPath
        required: true
        type: string
      - description: FileToUpload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: FilesUploaded
          schema:
            type: object
        "207":
          description: FilesPartialUploaded
          schema:
            type: object
      security:
      - Bearer: []
      summary: UploadFiles
      tags:
      - files
  /v1/marketplace/catalog/:
    get:
      consumes:
      - application/json
      description: List marketplace catalog items.
      parameters:
      - description: Id
        in: query
        name: id
        type: integer
      - description: Slug
        in: query
        name: slug
        type: string
      - description: Name
        in: query
        name: name
        type: string
      - description: Type
        in: query
        name: type
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadMarketplaceCatalogItemsResponse'
      security:
      - Bearer: []
      summary: ReadCatalog
      tags:
      - marketplace
    post:
      consumes:
      - application/json
      description: Install a marketplace catalog item.
      parameters:
      - description: urlPath is both the install directory and HTTP sub-directory.
        in: body
        name: InstallMarketplaceCatalogItem
        required: true
        schema:
          $ref: '#/definitions/dto.InstallMarketplaceCatalogItem'
      produces:
      - application/json
      responses:
        "201":
          description: MarketplaceCatalogItemInstallationScheduled
          schema:
            type: object
      summary: InstallCatalogItem
      tags:
      - marketplace
  /v1/marketplace/installed/:
    get:
      consumes:
      - application/json
      description: List marketplace installed items.
      parameters:
      - description: Id
        in: query
        name: id
        type: integer
      - description: Hostname
        in: query
        name: hostname
        type: string
      - description: Type
        in: query
        name: type
        type: string
      - description: InstallUuid
        in: query
        name: installationUuid
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadMarketplaceInstalledItemsResponse'
      security:
      - Bearer: []
      summary: ReadInstalledItems
      tags:
      - marketplace
  /v1/marketplace/installed/{installedId}/:
    delete:
      consumes:
      - application/json
      description: Delete/Uninstall an installed item.
      parameters:
      - description: MarketplaceInstalledItemId to delete.
        in: path
        name: installedId
        required: true
        type: integer
      - description: Should uninstall all services not being used? Default is 'true'.
        in: query
        name: shouldUninstallServices
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: MarketplaceInstalledItemDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteInstalledItem
      tags:
      - marketplace
  /v1/o11y/overview/:
    get:
      consumes:
      - application/json
      description: Show system information and resource usage.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.O11yOverview'
      security:
      - Bearer: []
      summary: O11yOverview
      tags:
      - o11y
  /v1/runtime/php/{hostname}/:
    get:
      consumes:
      - application/json
      description: Get php version, modules and settings for a hostname.
      parameters:
      - description: Hostname
        in: path
        name: hostname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PhpConfigs'
      security:
      - Bearer: []
      summary: ReadPhpConfigs
      tags:
      - runtime
    put:
      consumes:
      - application/json
      description: Update php version, modules and settings for a hostname.
      parameters:
      - description: Hostname
        in: path
        name: hostname
        required: true
        type: string
      - description: modules and settings are optional.
        in: body
        name: updatePhpConfigsDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePhpConfigs'
      produces:
      - application/json
      responses:
        "200":
          description: PhpConfigsUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdatePhpConfigs
      tags:
      - runtime
  /v1/scheduled-task/:
    get:
      consumes:
      - application/json
      description: List scheduled tasks.
      parameters:
      - description: TaskId
        in: query
        name: taskId
        type: string
      - description: TaskName
        in: query
        name: taskName
        type: string
      - description: TaskStatus
        in: query
        name: taskStatus
        type: string
      - description: TaskTags (semicolon separated)
        in: query
        name: taskTags
        type: string
      - description: StartedBeforeAt
        in: query
        name: startedBeforeAt
        type: string
      - description: StartedAfterAt
        in: query
        name: startedAfterAt
        type: string
      - description: FinishedBeforeAt
        in: query
        name: finishedBeforeAt
        type: string
      - description: FinishedAfterAt
        in: query
        name: finishedAfterAt
        type: string
      - description: CreatedBeforeAt
        in: query
        name: createdBeforeAt
        type: string
      - description: CreatedAfterAt
        in: query
        name: createdAfterAt
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadScheduledTasksResponse'
      security:
      - Bearer: []
      summary: ReadScheduledTasks
      tags:
      - scheduled-task
    put:
      consumes:
      - application/json
      description: Reschedule a task or change its status.
      parameters:
      - description: UpdateScheduledTask (Only id is required.)
        in: body
        name: updateScheduledTaskDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateScheduledTask'
      produces:
      - application/json
      responses:
        "200":
          description: ScheduledTaskUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateScheduledTask
      tags:
      - scheduled-task
  /v1/services/:
    get:
      consumes:
      - application/json
      description: List installed services and their status.
      parameters:
      - description: Id
        in: query
        name: id
        type: integer
      - description: Name
        in: query
        name: name
        type: string
      - description: Nature
        in: query
        name: nature
        type: string
      - description: Type
        in: query
        name: type
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadInstalledServicesItemsResponse'
      security:
      - Bearer: []
      summary: ReadInstalledItems
      tags:
      - services
    put:
      consumes:
      - application/json
      description: Update service details.
      parameters:
      - description: Only name is required.<br />Solo services can only change status.<br
          />status may be 'running', 'stopped', 'uninstalled' or 'restarting'.
        in: body
        name: updateServiceDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateService'
      produces:
      - application/json
      responses:
        "200":
          description: ServiceUpdated
          schema:
            type: object
      security:
      - Bearer: []
      summary: UpdateService
      tags:
      - services
  /v1/services/{svcName}/:
    delete:
      consumes:
      - application/json
      description: Delete/Uninstall a service.
      parameters:
      - description: ServiceName to delete
        in: path
        name: svcName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ServiceDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteService
      tags:
      - services
  /v1/services/custom/:
    post:
      consumes:
      - application/json
      description: Install a new custom service.
      parameters:
      - description: name, type and startCmd is required.<br />If version is not provided,
          it will be 'lts'.<br />If portBindings is not provided, it wil be default
          service port bindings.<br />If autoCreateMapping is not provided, it will
          be 'true'.
        in: body
        name: createCustomServiceDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCustomService'
      produces:
      - application/json
      responses:
        "201":
          description: CustomServiceCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateCustomService
      tags:
      - services
  /v1/services/installables/:
    get:
      consumes:
      - application/json
      description: List installable services.
      parameters:
      - description: Id
        in: query
        name: id
        type: integer
      - description: Name
        in: query
        name: name
        type: string
      - description: Nature
        in: query
        name: nature
        type: string
      - description: Type
        in: query
        name: type
        type: string
      - description: PageNumber (Pagination)
        in: query
        name: pageNumber
        type: integer
      - description: ItemsPerPage (Pagination)
        in: query
        name: itemsPerPage
        type: integer
      - description: SortBy (Pagination)
        in: query
        name: sortBy
        type: string
      - description: SortDirection (Pagination)
        in: query
        name: sortDirection
        type: string
      - description: LastSeenId (Pagination)
        in: query
        name: lastSeenId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReadInstallableServicesItemsResponse'
      security:
      - Bearer: []
      summary: ReadInstallableItems
      tags:
      - services
    post:
      consumes:
      - application/json
      description: Install a new installable service.
      parameters:
      - description: Only name is required.<br />If version is not provided, it will
          be 'lts'.<br />If portBindings is not provided, it wil be default service
          port bindings.<br />If autoCreateMapping is not provided, it will be 'true'.
        in: body
        name: createInstallableServiceDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateInstallableService'
      produces:
      - application/json
      responses:
        "201":
          description: InstallableServiceCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateInstallableService
      tags:
      - services
  /v1/setup/:
    post:
      consumes:
      - application/json
      description: Creates the first Infinite OS account without requiring authentication.<br
        />This can only be used when the Infinite OS interface is accessed for the
        first time with no accounts created.
      parameters:
      - description: CreateFirstAccount
        in: body
        name: createFirstAccount
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccount'
      produces:
      - application/json
      responses:
        "201":
          description: FirstAccountCreated
          schema:
            type: object
      summary: SetupInfiniteOs
      tags:
      - setup
  /v1/ssl/:
    get:
      consumes:
      - application/json
      description: List ssl pairs.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.SslPair'
            type: array
      security:
      - Bearer: []
      summary: ReadSslPairs
      tags:
      - ssl
    post:
      consumes:
      - application/json
      description: Create a new ssl pair.
      parameters:
      - description: All props are required.<br />virtualHosts may be string or []string.
          Alias is not allowed.<br />certificate is a string field, i.e. ignore the
          structure shown.<br />certificate and key must be base64 encoded.
        in: body
        name: createSslPairDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSslPair'
      produces:
      - application/json
      responses:
        "201":
          description: SslPairCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateSslPair
      tags:
      - ssl
  /v1/ssl/{sslPairId}/:
    delete:
      consumes:
      - application/json
      description: Delete a ssl pair.
      parameters:
      - description: SslPairId to delete.
        in: path
        name: sslPairId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: SslPairDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteSslPair
      tags:
      - ssl
  /v1/ssl/vhost/:
    put:
      consumes:
      - application/json
      description: Delete vhosts from a ssl pair.
      parameters:
      - description: All props are required.
        in: body
        name: deleteSslPairVhostsDto
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteSslPairVhosts'
      produces:
      - application/json
      responses:
        "200":
          description: SslPairVhostsRemoved
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteSslPairVhosts
      tags:
      - ssl
  /v1/vhosts/:
    get:
      consumes:
      - application/json
      description: List virtual hosts.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.VirtualHost'
            type: array
      security:
      - Bearer: []
      summary: ReadVirtualHosts
      tags:
      - vhosts
    post:
      consumes:
      - application/json
      description: Create a new vhost.
      parameters:
      - description: Only hostname is required.<br />type may be 'top-level', 'subdomain',
          'wildcard' or 'alias'. If is not provided, it will be 'top-level'. If type
          is 'alias', 'parentHostname' will be required.
        in: body
        name: createVirtualHostDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateVirtualHost'
      produces:
      - application/json
      responses:
        "201":
          description: VirtualHostCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateVirtualHost
      tags:
      - vhosts
  /v1/vhosts/{hostname}/:
    delete:
      consumes:
      - application/json
      description: Delete a vhost.
      parameters:
      - description: Hostname to delete
        in: path
        name: hostname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: VirtualHostDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteVirtualHost
      tags:
      - vhosts
  /v1/vhosts/mapping/:
    get:
      consumes:
      - application/json
      description: List virtual hosts with mappings.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.VirtualHostWithMappings'
            type: array
      security:
      - Bearer: []
      summary: ReadVirtualHostsWithMappings
      tags:
      - vhosts
    post:
      consumes:
      - application/json
      description: Create a new vhost mapping.
      parameters:
      - description: hostname, path and targetType are required.<br />matchPattern
          may be 'begins-with', 'contains', 'equals' or 'ends-with'. If is not provided,
          it will be 'begins-with'.<br />targetType may be 'url', 'service', 'response-code',
          'inline-html' or 'static-files'. If targetType is 'url', targetHttpResponseCode
          may be provided. If is not provided, targetHttpResponseCode will be '200'.
          If targetType is 'response-code', targetHttpResponseCode may be provided.
          If is not provided, targetValue will be required. If both were provided,
          targetValue will have priority.<br />targetValue must have the same value
          as the targetType requires.
        in: body
        name: createMappingDto
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMapping'
      produces:
      - application/json
      responses:
        "201":
          description: MappingCreated
          schema:
            type: object
      security:
      - Bearer: []
      summary: CreateVirtualHostMapping
      tags:
      - vhosts
  /v1/vhosts/mapping/{mappingId}/:
    delete:
      consumes:
      - application/json
      description: Delete a vhost mapping.
      parameters:
      - description: MappingId to delete.
        in: path
        name: mappingId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: MappingDeleted
          schema:
            type: object
      security:
      - Bearer: []
      summary: DeleteVirtualHostMapping
      tags:
      - vhosts
securityDefinitions:
  Bearer:
    description: Type "Bearer" + JWT token or API key.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
