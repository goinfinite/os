package uiLayout

import "github.com/goinfinite/ui/src/display"

import (
	_ "embed"
	infraEnvs "github.com/goinfinite/os/src/infra/envs"
)

type SidebarItem struct {
	Label string `json:"label"`
	Icon  string `json:"icon"`
	Link  string `json:"link"`
}

var SidebarItems = []SidebarItem{
	{"Overview", "ph-speedometer", "/overview/"},
	{"Accounts", "ph-users-three", "/accounts/"},
	{"Databases", "ph-database", "/databases/"},
	{"Runtime", "ph-code", "/runtimes/"},
	{"Cron Jobs", "ph-clock", "/crons/"},
	{"File Manager", "ph-files", "/file-manager/"},
	{"Mappings", "ph-graph", "/mappings/"},
	{"SSL Certificates", "ph-lock", "/ssls/"},
	{"Marketplace", "ph-storefront", "/marketplace/"},
}

//go:embed state.js
var sidebarLayoutAlpineState string

templ SidebarHeader() {
	<div class="mx-auto flex flex-col items-center justify-center gap-4 py-6">
		<!-- Logo -->
		<div class="flex flex-col items-center justify-center gap-1">
			<a
				href="https://goinfinite.net/os/"
				title="Infinite OS"
				target="_blank"
				:class="isSidebarCollapsed ? 'w-12' : 'w-24'"
			>
				<img src="/assets/os-logo.svg" alt="Infinite OS" class="fill-white"/>
			</a>
			<p class="text-center text-[0.5rem]">v{ infraEnvs.InfiniteOsVersion }</p>
		</div>
	</div>
}

templ SidebarMiddle() {
	<ul
		class="flex flex-col gap-4 py-6"
		:class="{'items-center':isSidebarCollapsed, 'px-3':!isSidebarCollapsed}"
	>
		for _, sidebarItem := range SidebarItems {
			<li>
				<a
					@click={ "$store.main.navigateTo('" + sidebarItem.Link + "')" }
					class="group relative flex cursor-pointer items-center gap-2"
					title={ sidebarItem.Label }
				>
					<div class="group-hover:text-secondary-500 flex items-center justify-center rounded-md bg-neutral-50/5 p-2 transition-colors group-hover:bg-neutral-50/10">
						<i
							class={ "ph-duotone " + sidebarItem.Icon + " block text-2xl" }
							:class={ "{'text-secondary-500' : $store.main.isActiveRoute('" + sidebarItem.Link + "')}" }
						></i>
					</div>
					<span
						class="group-hover:text-secondary-500 select-none text-sm"
						:class={ "{'text-secondary-500' : $store.main.isActiveRoute('" + sidebarItem.Link + "'), 'hidden' : isSidebarCollapsed}" }
					>
						{ sidebarItem.Label }
					</span>
				</a>
			</li>
		}
		<li id="htmx-routing-attributes-element" class="hidden" hx-push-url="true"></li>
	</ul>
}

templ SidebarFooter() {
	<div class="mx-auto flex flex-col items-center justify-center gap-4 pb-12 pt-4">
		<!-- LogoutButton -->
		<button
			type="button"
			@click="clearSession()"
			class="hover:bg-secondary-500 flex items-center justify-center rounded border border-neutral-400/50 bg-transparent text-center text-sm text-neutral-400 transition-all hover:border-transparent hover:text-neutral-50"
			:class="isSidebarCollapsed ? 'p-0.75' : 'px-2 py-1 gap-1'"
		>
			<i class="ph-bold ph-power"></i>
			<span :class="isSidebarCollapsed && 'hidden'">logout</span>
		</button>
	</div>
}

templ Sidebar() {
	<!-- Sidebar JavaScript -->
	@templ.Raw(`<script type="text/javascript">` + sidebarLayoutAlpineState + `</script>`)
	<!-- Sidebar HTML -->
	<div x-data="sidebar">
		@uiDisplay.Sidebar(uiDisplay.SidebarSettings{
			MiddleContent:              SidebarMiddle(),
			HeaderContent:              SidebarHeader(),
			FooterContent:              SidebarFooter(),
			IsCollapsedTwoWayStatePath: "isSidebarCollapsed",
			AttachmentMode:             uiDisplay.SidebarAttachmentModeFixed,
			BackgroundColor:            "bg-primary-800",
			Width:                      "w-45",
		})
	</div>
}
