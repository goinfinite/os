package uiPresenter

import (
	_ "embed"
	"github.com/goinfinite/os/src/domain/dto"
	"github.com/goinfinite/os/src/domain/valueObject"
	componentForm "github.com/goinfinite/os/src/presentation/ui/component/form"
	componentMappings "github.com/goinfinite/os/src/presentation/ui/component/mappings"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
	"github.com/goinfinite/ui/src/control"
	uiDisplay "github.com/goinfinite/ui/src/display"
	uiForm "github.com/goinfinite/ui/src/form"
)

const (
	MappingsRecordsDisplayId               string = "mappings-table"
	MappingsRecordsDisplayRefreshEventName string = "refresh:" + MappingsRecordsDisplayId
)

//go:embed state.js
var mappingsIndexAlpineState string

templ MappingsIndex(
	vhostsWithMappings []dto.VirtualHostWithMappings,
	vhostsHostnames []string,
	installedServiceNames []string,
	secRulesLabelValueOptions []uiForm.SelectLabelValueOption,
) {
	<!-- MappingsIndex JavaScript -->
	@templ.Raw(`<script type="text/javascript">` + mappingsIndexAlpineState + `</script>`)
	<!-- MappingsIndex HTML -->
	<div x-data="mappings" class="flex flex-col gap-2">
		<div class="flex flex-row items-center justify-between">
			@componentStructural.PageTitle(
				"Mappings",
				"Manage virtual hosts and their mappings to services, URLs, inline HTML etc.",
				"ph-graph",
			)
			<div class="flex basis-[50%] flex-row gap-3">
				@uiControl.Button(uiControl.ButtonSettings{
					Label:                "create virtual host",
					IconLeft:             "ph-plus-square",
					BackgroundColor:      "secondary-500",
					BackgroundColorHover: "secondary-300",
					IsFullWidth:          true,
					OnClickFunc:          "openCreateVirtualHostModal()",
				})
				@uiControl.Button(uiControl.ButtonSettings{
					Label:                "create mapping",
					IconLeft:             "ph-plus-square",
					BackgroundColor:      "secondary-500",
					BackgroundColorHover: "secondary-300",
					IsFullWidth:          true,
					OnClickFunc:          "openCreateMappingModal()",
				})
				@uiControl.Button(uiControl.ButtonSettings{
					Label:           "security rules",
					IconLeft:        "ph-shield",
					BackgroundColor: "transparent",
					RingColor:       "secondary-500",
					TextColor:       "secondary-500",
					TextColorHover:  "secondary-300",
					IsFullWidth:     true,
					OnClickFunc:     "window.location.href = '/mappings/security-rules/'",
				})
			</div>
		</div>
		@MappingsFormTable(vhostsWithMappings)
		@CreateVirtualHostModal(vhostsHostnames)
		@UpdateVirtualHostModal()
		@componentStructural.DeleteModal(
			"isDeleteVirtualHostModalOpen", "closeDeleteVirtualHostModal()", "deleteVirtualHostElement()",
			"virtualHost.hostname", "virtualHost.hostname",
		)
		@CreateMappingModal(
			vhostsHostnames, installedServiceNames, secRulesLabelValueOptions,
		)
		@CreateMappingFromVirtualHostModal(
			vhostsHostnames, installedServiceNames, secRulesLabelValueOptions,
		)
		@UpdateMappingModal(
			installedServiceNames, secRulesLabelValueOptions,
		)
		@componentStructural.DeleteModal(
			"isDeleteMappingModalOpen", "closeDeleteMappingModal()", "deleteMappingElement()",
			"mapping.path", "mapping.id",
		)
	</div>
}

templ MappingsFormTable(vhostsWithMappings []dto.VirtualHostWithMappings) {
	<!-- MappingsFormTable -->
	<div
		id={ MappingsRecordsDisplayId }
		hx-get="/mappings/"
		hx-trigger={ MappingsRecordsDisplayRefreshEventName + " from:window" }
		hx-select={ "#" + MappingsRecordsDisplayId }
		hx-target={ "#" + MappingsRecordsDisplayId }
		hx-swap="outerHTML transition:true"
		class="mt-2 flex flex-col gap-4"
	>
		for _, vhostWithMappings := range vhostsWithMappings {
			if vhostWithMappings.Type == valueObject.VirtualHostTypeAlias {
				{{ continue }}
			}
			<div class="flex gap-4 rounded-lg bg-neutral-950/20 p-4">
				@templ.JSONScript("vhostEntity_"+vhostWithMappings.Hostname.String(), vhostWithMappings)
				<!-- VirtualHosts Column -->
				<div class="min-h-56 flex w-1/4 flex-col gap-3 rounded-lg bg-neutral-500/5 p-3">
					<div class="flex flex-wrap items-center justify-between gap-2">
						<p class="truncate text-lg font-bold">
							{{ vhostHostname := vhostWithMappings.Hostname.String() }}
							if vhostWithMappings.IsWildcard {
								{{ vhostHostname = "*." + vhostWithMappings.Hostname.String() }}
							}
							{ vhostHostname }
						</p>
						<div class="flex space-x-2">
							@componentStructural.CircularIconButtonWithTooltip(
								"ph-plus", "infinite-500", "infinite-200",
								"openCreateMappingFromVirtualHostModal('"+vhostWithMappings.Hostname.String()+"')",
								"create mapping", "neutral-50/10",
							)
							@componentStructural.CircularIconButtonWithTooltip(
								"ph-pencil", "neutral-50/10", "neutral-50/30",
								"openUpdateVirtualHostModal('"+vhostWithMappings.Hostname.String()+"')",
								"update vhost", "neutral-50/10",
							)
							if !vhostWithMappings.IsPrimary {
								@componentStructural.CircularIconButtonWithTooltip(
									"ph-trash", "red-800", "red-600",
									"openDeleteVirtualHostModal('"+vhostWithMappings.Hostname.String()+"')",
									"delete vhost", "red-500",
								)
							}
						</div>
					</div>
					<div class="flex flex-wrap gap-3 overflow-hidden">
						@uiDisplay.Tag(uiDisplay.TagSettings{
							Size:                 uiDisplay.TagSizeXs,
							OuterBackgroundColor: "neutral-50/10",
							OuterLeftIcon:        "ph-folder-open",
							InnerLabel:           vhostWithMappings.RootDirectory.String(),
						})
						{{ vhostType := vhostWithMappings.Type.String() }}
						if vhostWithMappings.IsWildcard {
							{{ vhostType = valueObject.VirtualHostTypeWildcard.String() }}
						}
						@uiDisplay.Tag(uiDisplay.TagSettings{
							Size:                 uiDisplay.TagSizeXs,
							OuterBackgroundColor: "neutral-50/10",
							OuterLeftIcon:        "ph-tree-view",
							InnerLabel:           vhostType,
						})
					</div>
					if len(vhostWithMappings.AliasesHostnames) > 0 {
						<div>
							<p class="text-uppercase ml-1 text-[0.75rem] font-bold text-neutral-300/50">ALIASES</p>
							<div class="mt-0.5 flex flex-col items-center rounded-lg bg-neutral-500/5 text-xs">
								for _, aliasHostname := range vhostWithMappings.AliasesHostnames {
									<div class="flex w-full items-center justify-between border-t-2 border-neutral-500/20 p-3 first:border-t-0">
										<div>{ aliasHostname.String() }</div>
										<div>
											<a
												class="flex cursor-pointer items-center rounded-md text-base text-neutral-300 hover:text-red-600"
												@click.prevent={ "openDeleteVirtualHostModal('" + aliasHostname.String() + "')" }
											><i class={ "ph-bold ph-x-circle" }></i></a>
										</div>
									</div>
								}
							</div>
						</div>
					}
				</div>
				<!-- Mappings Column -->
				<div class="flex w-3/4 flex-col gap-3">
					for _, mappingEntity := range vhostWithMappings.Mappings {
						@componentMappings.VirtualHostMappingsList(
							mappingEntity, vhostWithMappings.RootDirectory,
						)
					}
				</div>
			</div>
		}
	</div>
}

templ CreateVirtualHostForm(existingHostnames []string) {
	<!-- CreateVirtualHostForm -->
	<form
		id="create-vhost-form"
		class="flex flex-col gap-5"
		hx-post="/api/v1/vhost/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		@submit="closeCreateVirtualHostModal()"
		@htmx:after-request={ "$dispatch('" + MappingsRecordsDisplayRefreshEventName + "')" }
	>
		@componentForm.SelectInput(
			"type", "Type", "virtualHost.type", "",
			valueObject.AvailableVirtualHostsTypes, false,
		)
		<template x-if="virtualHost.type == 'top-level'">
			<div class="space-y-6">
				@componentForm.InputField(componentForm.InputFieldDto{
					Type:               "text",
					Id:                 "hostname",
					Label:              "Hostname (e.g. example.com)",
					BindModelValuePath: "virtualHost.hostname",
				})
				@componentForm.CheckboxInputSwitchToggle(componentForm.CheckboxInputSwitchToggleDto{
					Id:            "isWildcard",
					Label:         "Enable Wildcard (e.g. *.example.com)",
					BindModelPath: "virtualHost.isWildcard",
				})
			</div>
		</template>
		<template x-if="virtualHost.type == 'subdomain'">
			<div>
				@componentForm.InputField(componentForm.InputFieldDto{
					Type:               "text",
					Id:                 "hostname",
					Label:              "Hostname (e.g. sub.example.com)",
					BindModelValuePath: "virtualHost.hostname",
				})
			</div>
		</template>
		<template x-if="virtualHost.type == 'wildcard'">
			@componentForm.InputField(componentForm.InputFieldDto{
				Type:               "text",
				Id:                 "hostname",
				Label:              "Main Hostname (without asterisk, e.g. example.com)",
				BindModelValuePath: "virtualHost.hostname",
			})
		</template>
		<template x-if="virtualHost.type == 'alias'">
			<div class="space-y-6">
				@componentForm.InputField(componentForm.InputFieldDto{
					Type:               "text",
					Id:                 "hostname",
					Label:              "Alias (e.g. example.com)",
					BindModelValuePath: "virtualHost.hostname",
				})
				@componentForm.SelectInput(
					"parentHostname", "Parent Hostname", "virtualHost.parentHostname", "",
					existingHostnames, false,
				)
			</div>
		</template>
		@componentForm.DeactivableSubmitButton(
			"Create", "ph-check-fat", "",
			"shouldDisableCreateVirtualHostSubmitButton", false,
		)
	</form>
}

templ CreateVirtualHostModal(existingHostnames []string) {
	@componentStructural.RegularModal(
		"Create Virtual Host", "isCreateVirtualHostModalOpen", "closeCreateVirtualHostModal()",
		"",
	) {
		@CreateVirtualHostForm(existingHostnames)
	}
}

templ UpdateVirtualHostForm() {
	<!-- UpdateVirtualHostForm -->
	<form
		id="update-vhost-form"
		class="flex flex-col gap-3"
		hx-put="/api/v1/vhost/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		@submit="closeUpdateVirtualHostModal()"
		@htmx:after-request={ "$dispatch('" + MappingsRecordsDisplayRefreshEventName + "')" }
	>
		<input type="hidden" name="hostname" x-bind:value="virtualHost.hostname"/>
		@componentForm.CheckboxInputSwitchToggle(componentForm.CheckboxInputSwitchToggleDto{
			Id:            "isWildcard",
			Label:         "Enable Wildcard (e.g. *.example.com)",
			BindModelPath: "virtualHost.isWildcard",
		})
		@componentForm.SubmitButton("", "Update", "ph-check-fat", "", false)
	</form>
}

templ UpdateVirtualHostModal() {
	@componentStructural.RegularModal(
		"Update Virtual Host", "isUpdateVirtualHostModalOpen",
		"closeUpdateVirtualHostModal()", "",
	) {
		@UpdateVirtualHostForm()
	}
}

templ MappingFormAdvancedSettings(secRulesLabelValueOptions []uiForm.SelectLabelValueOption) {
	<!-- MappingUpgradeInsecureRequestsRadioInput -->
	@uiForm.InlineRadioGroup(uiForm.InlineRadioGroupSettings{
		Label: "Upgrade Insecure Requests (force HTTPS)",
		InputSettings: []uiForm.RadioInputSettings{
			{
				Label:           "Yes",
				StateValue:      "true",
				TwoWayStatePath: "mapping.shouldUpgradeInsecureRequests",
			},
			{
				Label:           "No",
				StateValue:      "false",
				TwoWayStatePath: "mapping.shouldUpgradeInsecureRequests",
			},
		},
		TwoWayStatePath: "mapping.shouldUpgradeInsecureRequests",
		InputName:       "shouldUpgradeInsecureRequests",
	})
	<!-- MappingMatchPatternSelectInput -->
	@uiForm.SelectInput(uiForm.SelectInputSettings{
		InputName: "matchPattern",
		Label:     "Match Pattern",
		LabelValueOptions: []uiForm.SelectLabelValueOption{
			{Label: "Begins With", Value: "begins-with"},
			{Label: "Contains", Value: "contains"},
			{Label: "Equals", Value: "equals"},
			{Label: "Ends With", Value: "ends-with"},
		},
		TwoWayStatePath:         "mapping.matchPattern",
		DropdownBackgroundColor: "primary-500/95",
	})
	<!-- MappingSecurityRuleSelectInput -->
	@uiForm.SelectInput(uiForm.SelectInputSettings{
		InputName:                "mappingSecurityRuleId",
		Label:                    "Security Rule",
		LabelValueOptions:        secRulesLabelValueOptions,
		TwoWayStatePath:          "mapping.mappingSecurityRuleId",
		DropdownBackgroundColor:  "primary-500/95",
		ShouldIncludeBlankOption: true,
	})
}

templ CreateMappingForm(
	vhostsHostnames []string,
	installedServiceNames []string,
	secRulesLabelValueOptions []uiForm.SelectLabelValueOption,
) {
	<!-- CreateMappingForm -->
	<form
		class="flex flex-col gap-5"
		hx-post="/api/v1/vhost/mapping/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		@submit="closeCreateMappingModal()"
		@htmx:after-request={ "$dispatch('" + MappingsRecordsDisplayRefreshEventName + "')" }
	>
		@componentMappings.MappingTypeRadioInput("targetType", "Type", "mapping.targetType")
		<template x-if="isCreateMappingFromVirtualHost">
			@componentForm.InputFieldReadOnly("text", "hostname", "Hostname", "virtualHost.hostname", "")
		</template>
		<template x-if="!isCreateMappingFromVirtualHost">
			@componentForm.SelectInput(
				"hostname", "Hostname", "virtualHost.hostname", "",
				vhostsHostnames, true,
			)
		</template>
		@componentForm.InputFieldWithPrefix(componentForm.InputFieldWithPrefixDto{
			Type:                "text",
			Id:                  "path",
			Label:               "Source URL",
			BindInputValuePath:  "mapping.path",
			BindPrefixValuePath: "vhostHostnameWithTrailingSlash",
		})
		<template x-if="mapping.targetType == 'service'">
			<div>
				@componentForm.SelectInput(
					"targetValue", "Service Name", "mapping.targetValue", "",
					installedServiceNames, true,
				)
			</div>
		</template>
		<template x-if="mapping.targetType == 'url'">
			<div class="space-y-6">
				@componentForm.InputField(componentForm.InputFieldDto{
					Type:               "text",
					Id:                 "targetValue",
					Label:              "Destination URL",
					BindModelValuePath: "mapping.targetValue",
				})
				@componentMappings.ResponseCodeSelectInput(
					"targetHttpResponseCode", "Response Code", "mapping.targetHttpResponseCode",
				)
			</div>
		</template>
		<template x-if="mapping.targetType == 'inline-html'">
			<div class="space-y-6">
				@componentForm.TextArea(componentForm.TextAreaDto{
					Id:                 "targetValue",
					Label:              "Inline HTML",
					BindModelValuePath: "mapping.targetValue",
				})
				@componentMappings.ResponseCodeSelectInput(
					"targetHttpResponseCode", "Response Code", "mapping.targetHttpResponseCode",
				)
			</div>
		</template>
		<template x-if="mapping.targetType == 'response-code'">
			<div>
				@componentMappings.ResponseCodeSelectInput(
					"targetHttpResponseCode", "Response Code", "mapping.targetHttpResponseCode",
				)
			</div>
		</template>
		@uiDisplay.Accordion(uiDisplay.AccordionSettings{
			Items: []uiDisplay.AccordionItemSettings{
				{
					Title:   "Advanced Settings",
					Icon:    "ph-gear",
					Content: MappingFormAdvancedSettings(secRulesLabelValueOptions),
				},
			},
		})
		@componentForm.DeactivableSubmitButton(
			"Create", "ph-check-fat", "",
			"shouldDisableCreateMappingSubmitButton", false,
		)
	</form>
}

templ CreateMappingModal(
	vhostsHostnames []string,
	installedServiceNames []string,
	secRulesLabelValueOptions []uiForm.SelectLabelValueOption,
) {
	@componentStructural.RegularModal(
		"Create Mapping", "isCreateMappingModalOpen", "closeCreateMappingModal()",
		"",
	) {
		@CreateMappingForm(vhostsHostnames, installedServiceNames, secRulesLabelValueOptions)
	}
}

templ CreateMappingFromVirtualHostModal(
	vhostsHostnames []string,
	installedServiceNames []string,
	secRulesLabelValueOptions []uiForm.SelectLabelValueOption,
) {
	@componentStructural.RegularModal(
		"Create Mapping", "isCreateMappingFromVirtualHostModalOpen",
		"closeCreateMappingModal()", "virtualHost.hostname",
	) {
		@CreateMappingForm(vhostsHostnames, installedServiceNames, secRulesLabelValueOptions)
	}
}

templ UpdateMappingForm(
	installedServiceNames []string,
	secRulesLabelValueOptions []uiForm.SelectLabelValueOption,
) {
	<!-- UpdateMappingForm -->
	<form
		hx-put="/api/v1/vhost/mapping/"
		class="flex flex-col gap-5"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		@submit="closeUpdateMappingModal()"
		@htmx:after-request={ "$dispatch('" + MappingsRecordsDisplayRefreshEventName + "')" }
	>
		<input name="id" type="hidden" :value="mapping.id"/>
		@componentForm.InputFieldReadOnly("text", "hostname", "Virtual Host", "virtualHost.hostname", "")
		@componentMappings.MappingTypeRadioInput("targetType", "Type", "mapping.targetType")
		@componentForm.InputFieldWithPrefix(componentForm.InputFieldWithPrefixDto{
			Type:                "text",
			Id:                  "path",
			Label:               "Source URL",
			BindInputValuePath:  "mapping.path",
			BindPrefixValuePath: "vhostHostnameWithTrailingSlash",
		})
		<template x-if="mapping.targetType == 'service'">
			<div>
				@componentForm.SelectInput(
					"targetValue", "Service Name", "mapping.targetValue", "",
					installedServiceNames, true,
				)
			</div>
		</template>
		<template x-if="mapping.targetType == 'url'">
			<div class="space-y-6">
				@componentForm.InputField(componentForm.InputFieldDto{
					Type:               "text",
					Id:                 "targetValue",
					Label:              "Destination URL",
					BindModelValuePath: "mapping.targetValue",
				})
				@componentMappings.ResponseCodeSelectInput(
					"targetHttpResponseCode", "Response Code", "mapping.targetHttpResponseCode",
				)
			</div>
		</template>
		<template x-if="mapping.targetType == 'inline-html'">
			<div class="space-y-6">
				@componentForm.TextArea(componentForm.TextAreaDto{
					Id:                 "targetValue",
					Label:              "Inline HTML",
					BindModelValuePath: "mapping.targetValue",
				})
				@componentMappings.ResponseCodeSelectInput(
					"targetHttpResponseCode", "Response Code", "mapping.targetHttpResponseCode",
				)
			</div>
		</template>
		<template x-if="mapping.targetType == 'response-code'">
			<div>
				@componentMappings.ResponseCodeSelectInput(
					"targetHttpResponseCode", "Response Code", "mapping.targetHttpResponseCode",
				)
			</div>
		</template>
		@uiDisplay.Accordion(uiDisplay.AccordionSettings{
			Items: []uiDisplay.AccordionItemSettings{
				{
					Title:   "Advanced Settings",
					Icon:    "ph-gear",
					Content: MappingFormAdvancedSettings(secRulesLabelValueOptions),
				},
			},
		})
		@componentForm.SubmitButton(
			"update-mapping-button", "Update", "ph-check-fat", "closeUpdateMappingModal()", false,
		)
	</form>
}

templ UpdateMappingModal(
	installedServiceNames []string,
	secRulesLabelValueOptions []uiForm.SelectLabelValueOption,
) {
	@componentStructural.RegularModal(
		"Update Mapping", "isUpdateMappingModalOpen", "closeUpdateMappingModal()", "mapping.id",
	) {
		@UpdateMappingForm(installedServiceNames, secRulesLabelValueOptions)
	}
}
