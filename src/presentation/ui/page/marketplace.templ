package page

import (
	"github.com/goinfinite/os/src/domain/entity"
	"github.com/goinfinite/os/src/domain/valueObject"
	componentForm "github.com/goinfinite/os/src/presentation/ui/component/form"
	componentMisc "github.com/goinfinite/os/src/presentation/ui/component/misc"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
)

type CatalogItemsGroupedByType struct {
	Apps       []entity.MarketplaceCatalogItem
	Frameworks []entity.MarketplaceCatalogItem
	Stacks     []entity.MarketplaceCatalogItem
}

type MarketplaceOverview struct {
	ListType           string
	InstalledItemsList []entity.MarketplaceInstalledItem
	CatalogItemsList   CatalogItemsGroupedByType
}

script MarketplaceIndexLocalState() {
    document.addEventListener('alpine:init', () => {
		Alpine.data('marketplace', () => ({
			// Primary States
			marketplaceItem: {},
			get hostnameWithTrailingSlash() {
				return this.marketplaceItem.hostname + "/";
			},
			get dataFieldsAsString() {
				let dataFieldsAsString = "";
				for (let dataField of this.marketplaceItem.dataFields) {
					if (!dataField.value) {
						continue
					}

					dataFieldsAsString += dataField.name + ':' + dataField.value + ';';
				}
				return dataFieldsAsString.slice(0, -1);
			},
			resetPrimaryStates() {
				this.marketplaceItem = {
					id: '',
					name: '',
					hostname: '',
					urlPath: '',
					dataFields: [],
				};
			},
			init() {
				this.resetPrimaryStates();
			},

			// Auxiliary States
			selectedMarketplaceCatalogVerticalTab: 'apps',
			updateSelectedMarketplaceCatalogVerticalTab(tabName) {
				this.selectedMarketplaceCatalogVerticalTab = tabName;
			},
			reloadMarketplacePageContent(listType) {
				htmx.ajax(
					'GET',
					'/marketplace/?listType=' + listType,
					{
						select: '#marketplace-page-content',
						target: '#marketplace-page-content',
						indicator: '#loading-overlay',
						swap: 'outerHTML transition:true'
					},
				);
			},
			imageLightbox: {
				isOpen: false,
				imageUrl: ''
			},
			openImageLightbox(imageUrl) {
				this.imageLightbox.isOpen = true;
				this.imageLightbox.imageUrl = imageUrl;
			},
			closeImageLightbox() {
				this.imageLightbox.isOpen = false;
				this.imageLightbox.imageUrl = '';
			},

			// Modal States
			isScheduleMarketplaceItemInstallationModalOpen: false,
			openScheduleMarketplaceItemInstallationModal(catalogItemId) {
				this.resetPrimaryStates();

				const catalogItemEntity = JSON.parse(
					document.getElementById('marketplaceCatalogItem_' + catalogItemId).textContent
				);
				this.marketplaceItem.id = catalogItemId;
				this.marketplaceItem.name = catalogItemEntity.name;

				for (const dataField of catalogItemEntity.dataFields) {
					dataField.value = dataField.defaultValue;
					this.marketplaceItem.dataFields.push(dataField);
				}

				this.isScheduleMarketplaceItemInstallationModalOpen = true;
			},
			closeScheduleMarketplaceItemInstallationModal() {
				this.isScheduleMarketplaceItemInstallationModalOpen = false;
			},
			isUninstallMarketplaceItemModalOpen: false,
			openUninstallMarketplaceItemModal(installedItemId, installedItemName) {
				this.resetPrimaryStates();

				this.marketplaceItem.id = installedItemId;
				this.marketplaceItem.name = installedItemName;
				this.isUninstallMarketplaceItemModalOpen = true;
			},
			closeUninstallMarketplaceItemModal() {
				this.isUninstallMarketplaceItemModalOpen = false;
			},
			uninstallMarketplaceItem() {
				htmx.ajax(
					'DELETE',
					'/api/v1/marketplace/installed/' + this.marketplaceItem.id + '/',
					{swap: 'none'},
				);
				this.$store.main.refreshScheduledTasksPopover()
				this.$dispatch('uninstall:marketplace-item');
				this.closeUninstallMarketplaceItemModal();
			},
		}));
	});
}

templ MarketplaceIndex(
	vhostsHostnames []string,
	marketplaceOverview MarketplaceOverview,
) {
	@MarketplaceIndexLocalState()
	<div class="flex flex-col" x-data="marketplace">
		<div class="mb-6 flex flex-row items-center justify-between">
			@componentStructural.PageTitle(
				"Marketplace",
				"Install and easily manage apps, frameworks, and stacks. With just a few clicks, you can set up ready-to-use solutions like websites and online stores. Flexible configuration of your environment quickly and conveniently, meeting your development and deployment needs.",
				"ph-storefront",
			)
		</div>
		<div
			id="marketplace-page-content"
			hx-get="/marketplace/"
			hx-trigger="uninstall:marketplace-item delay:500ms"
			hx-select="#marketplace-page-content"
			hx-target="#marketplace-page-content"
			hx-swap="outerHTML transition:true"
		>
			@MarketplaceTabs(marketplaceOverview)
			@MarketplaceCatalogItemCarouselImageLightbox()
			@componentStructural.ScheduleDeletionModal(
				"isUninstallMarketplaceItemModalOpen",
				"closeUninstallMarketplaceItemModal()",
				"uninstallMarketplaceItem()",
				"marketplaceItem.name", "marketplaceItem.id",
			)
			@ScheduleMarketplaceItemInstallationModal(vhostsHostnames)
		</div>
	</div>
}

templ MarketplaceInstalledItemsTable(
	installedItemsList []entity.MarketplaceInstalledItem,
) {
	<table class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out">
		<thead class="text-xs uppercase text-neutral-400">
			<tr class="border-b border-neutral-500 border-opacity-90 text-center">
				<th scope="col" class="w-1/6 px-5 py-3 text-left">Name</th>
				<th scope="col" class="w-1/6 px-5 py-3">Type</th>
				<th scope="col" class="w-1/6 px-5 py-3">Installation Path</th>
				<th scope="col" class="w-1/6 px-5 py-3">Installation Directory</th>
				<th scope="col" class="w-1/6 px-5 py-3">Created At</th>
				<th scope="col" class="w-1/6 px-5 py-3"></th>
			</tr>
		</thead>
		<tbody>
			for _, installedItem := range installedItemsList {
				<tr class="odd:bg-os-300 even:bg-os-500 border-b border-neutral-500 border-opacity-30 text-center">
					<th scope="row" class="w-1/6 px-5 py-3 text-left font-normal">
						<div class="inline-flex items-center">
							<img class="mr-2 h-10 w-10 rounded-full" src={ installedItem.AvatarUrl.String() }/>
							{ installedItem.Name.String() }
						</div>
					</th>
					<th scope="row" class="w-1/6 px-5 py-3 font-normal">{ installedItem.Type.String() }</th>
					<th scope="row" class="w-1/6 px-5 py-3 font-normal">
						{ installedItem.Hostname.String() + installedItem.UrlPath.String() }
					</th>
					<th scope="row" class="w-1/6 px-5 py-3 font-normal">{ installedItem.InstallDirectory.String() }</th>
					<th scope="row" class="w-1/6 px-5 py-3 font-normal">{ installedItem.CreatedAt.ReadDateOnly() }</th>
					<th scope="row" class="w-1/6 px-5 py-3 text-right font-normal">
						<div class="inline-flex">
							@componentStructural.CircularIconButtonWithTooltip(
								"ph-trash", "red-800", "red-600",
								"openUninstallMarketplaceItemModal("+installedItem.Id.String()+", '"+installedItem.Name.String()+"')",
								"Uninstall", "red-500",
							)
						</div>
					</th>
				</tr>
			}
		</tbody>
	</table>
}

templ MarketplaceCatalogItemCarouselImage(
	itemFirstSlug valueObject.MarketplaceItemSlug,
	itemName valueObject.MarketplaceItemName,
	screenshotUrl valueObject.Url,
) {
	<a @click={ "openImageLightbox('" + screenshotUrl.String() + "')" } class="cursor-pointer">
		<img
			src={ screenshotUrl.String() }
			alt={ itemName.String() + " Avatar" }
			class="max-h-30 m-auto rounded-md"
		/>
	</a>
}

func transformMarketplaceCatalogItemScreenshotUrlsIntoCarouselImages(
	itemFirstSlug valueObject.MarketplaceItemSlug,
	itemName valueObject.MarketplaceItemName,
	screenshotUrls []valueObject.Url,
) []templ.Component {
	carouselImages := []templ.Component{}
	for _, screenshotUrl := range screenshotUrls {
		carouselImage := MarketplaceCatalogItemCarouselImage(
			itemFirstSlug, itemName, screenshotUrl,
		)
		carouselImages = append(carouselImages, carouselImage)
	}

	return carouselImages
}

templ MarketplaceCatalogItemsTabContent(catalogItems []entity.MarketplaceCatalogItem) {
	<div class="grid grid-cols-2 gap-x-24 gap-y-8">
		for _, item := range catalogItems {
			<!-- MarketplaceCatalogItemTabContent JavaScript -->
			@templ.JSONScript("marketplaceCatalogItem_"+item.Id.String(), item)
			<!-- MarketplaceCatalogItemTabContent HTML -->
			<div class="bg-os-800 border-os-400 space-y-2 rounded-md border border-4 p-4">
				<div class="inline-flex items-center">
					<img class="mr-3 h-10 w-10" src={ item.AvatarUrl.String() }/>
					<h3>{ item.Name.String() }</h3>
				</div>
				@componentStructural.CollapsibleText(
					item.Slugs[0].String(),
					item.Description.String(), "sm", 180,
				)
				if len(item.ScreenshotUrls) == 0 {
					<div class="bg-os-500 p-5 text-center text-sm italic text-slate-500">
						This marketplace item has no screenshots.
					</div>
				} else {
					<div class="py-4">
						@componentMisc.MultiItemCarousel(
							item.Slugs[0].String()+"ImagesCarousel",
							transformMarketplaceCatalogItemScreenshotUrlsIntoCarouselImages(
								item.Slugs[0], item.Name, item.ScreenshotUrls,
							), 3,
						)
					</div>
				}
				@componentForm.SubmitButton(
					"install-"+item.Slugs[0].String()+"-marketplace-item",
					"Install", "ph-arrow-line-down",
					"openScheduleMarketplaceItemInstallationModal("+item.Id.String()+")",
					false,
				)
			</div>
		}
	</div>
}

templ MarketplaceCatalogItemsTab(
	catalogItemsGroupedByType CatalogItemsGroupedByType,
) {
	<div class="flex justify-stretch gap-4">
		@componentStructural.VerticalTabHeader(
			[]componentStructural.TabHeaderItem{
				{Label: "Apps", Value: "apps"},
				{Label: "Frameworks", Value: "frameworks"},
				{Label: "Stacks", Value: "stacks"},
			}, "selectedMarketplaceCatalogVerticalTab",
		)
		<div>
			<div x-show="selectedMarketplaceCatalogVerticalTab === 'apps'">
				@MarketplaceCatalogItemsTabContent(catalogItemsGroupedByType.Apps)
			</div>
			<div x-show="selectedMarketplaceCatalogVerticalTab === 'frameworks'">
				@MarketplaceCatalogItemsTabContent(catalogItemsGroupedByType.Frameworks)
			</div>
			<div x-show="selectedMarketplaceCatalogVerticalTab === 'stacks'">
				@MarketplaceCatalogItemsTabContent(catalogItemsGroupedByType.Stacks)
			</div>
		</div>
	</div>
}

templ MarketplaceTabs(marketplaceOverview MarketplaceOverview) {
	@componentStructural.HorizontalTabHeader(
		[]componentStructural.TabHeaderItem{
			{Label: "Installed", Value: "installed"},
			{Label: "Catalog", Value: "catalog"},
		}, marketplaceOverview.ListType, "reloadMarketplacePageContent",
	)
	<div class="bg-os-800 -mt-4 rounded-b-xl rounded-r-xl p-4">
		<div class="bg-os-500 rounded-b-lg rounded-r-lg p-6">
			if marketplaceOverview.ListType == "installed" {
				@MarketplaceInstalledItemsTable(marketplaceOverview.InstalledItemsList)
			} else {
				@MarketplaceCatalogItemsTab(marketplaceOverview.CatalogItemsList)
			}
		</div>
	</div>
}

templ MarketplaceCatalogItemCarouselImageLightbox() {
	<div
		x-show="imageLightbox.isOpen"
		x-on:click.away="closeImageLightbox()"
		class="fixed inset-0 z-50 flex h-full w-full items-center justify-center overflow-hidden bg-black bg-opacity-75 p-2"
	>
		<div @click.away="closeImageLightbox()" class="flex flex-col overflow-auto">
			<div class="z-50">
				<button
					@click="closeImageLightbox()"
					class="opacity-85 float-right bg-transparent pr-2 pt-2 hover:opacity-100 active:opacity-100"
				>
					<i class="ph-bold ph-x-square align-middle text-3xl"></i>
				</button>
			</div>
			<div class="p-2">
				<img class="max-h-150" :src="imageLightbox.imageUrl"/>
			</div>
		</div>
	</div>
}

templ ScheduleMarketplaceItemInstallationForm(vhostsHostnames []string) {
	<form
		id="schedule-marketplace-item-installation-form"
		hx-post="/api/v1/marketplace/catalog/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		@submit="$store.main.refreshScheduledTasksPopover()"
	>
		<input type="hidden" name="id" :value="marketplaceItem.id"/>
		<input type="hidden" name="dataFields" :value="dataFieldsAsString"/>
		<div class="my-6 space-y-2">
			<div class="w-100% inline-flex space-x-2">
				<div class="w-60%">
					@componentForm.SelectInput(
						"hostname", "Hostname", "marketplaceItem.hostname",
						"", vhostsHostnames, true,
					)
				</div>
				<div class="w-40%">
					@componentForm.InputFieldWithPrefix(componentForm.InputFieldWithPrefixDto{
						Type:                "text",
						Id:                  "urlPath",
						Label:               "URL Path",
						BindInputValuePath:  "marketplaceItem.urlPath",
						BindPrefixValuePath: "hostnameWithTrailingSlash",
						InfoTooltipContent:  "Path where the respective installed item will be available for access.",
					})
				</div>
			</div>
			<template x-if="marketplaceItem.dataFields.length > 0">
				@componentStructural.CollapsibleSection("Install Parameters", "ph-brackets-curly", true) {
					@componentStructural.Alert(
						componentStructural.AlertTypeWarning,
						"All fields without pre-filled values must be completed as they are required. Otherwise, the installation will fail!",
					)
					<div class="grid grid-cols-2 gap-4 mt-2">
						<template x-for="dataField in marketplaceItem.dataFields">
							<div>
								<template x-if="dataField.type === 'text' || dataField.type === 'email'">
									@componentForm.InputFieldClientSide(
										"dataField.type", "dataField.label", "dataField.value",
									)
								</template>
								<template x-if="dataField.type === 'password'">
									@componentForm.PasswordInputClientSide(
										"dataField.label", "dataField.value", true,
									)
								</template>
								<template x-if="dataField.type === 'select'">
									@componentForm.SelectInputClientSide(componentForm.SelectInputClientSideDto{
										BindLabel:     "dataField.label",
										BindModelPath: "dataField.value",
										BindOptions:   "dataField.options",
									})
								</template>
							</div>
						</template>
					</div>
				}
			</template>
		</div>
		@componentForm.SubmitButton(
			"install-marketplace-item-button", "Schedule installation",
			"ph-queue", "closeScheduleMarketplaceItemInstallationModal()", false,
		)
	</form>
}

templ ScheduleMarketplaceItemInstallationModal(vhostsHostnames []string) {
	@componentStructural.Modal(
		"Install marketplace item", "isScheduleMarketplaceItemInstallationModalOpen",
		"closeScheduleMarketplaceItemInstallationModal()", "marketplaceItem.name",
	) {
		@ScheduleMarketplaceItemInstallationForm(vhostsHostnames)
	}
}
