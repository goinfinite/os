package uiPage

import (
	_ "embed"
	"github.com/goinfinite/os/src/domain/entity"
	"github.com/goinfinite/os/src/domain/valueObject"
	componentDatabases "github.com/goinfinite/os/src/presentation/ui/component/databases"
	componentForm "github.com/goinfinite/os/src/presentation/ui/component/form"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
	presenterDto "github.com/goinfinite/os/src/presentation/ui/presenter/dto"
	"github.com/goinfinite/ui/src/display"
)

//go:embed databases.js
var databasesIndexAlpineState string

templ DatabasesIndex(selectedDbOverview presenterDto.DatabaseOverview) {
	<!-- DatabasesIndex JavaScript -->
	@templ.Raw(`<script type="text/javascript">` + databasesIndexAlpineState + `</script>`)
	<!-- DatabasesIndex HTML -->
	<div class="flex flex-col" x-data="databases">
		@componentStructural.PageTitle(
			"Databases",
			"Install the database services you need and manage each service individually by adding databases and users. Control user permissions by specifying what each user can and cannot do.",
			"ph-database",
		)
		<div
			id="databases-page-content"
			hx-get={ "/databases/?dbType=" + selectedDbOverview.Type.String() }
			hx-trigger="submit from:form delay:500ms, click from:button#delete-element delay:500ms"
			hx-select="#databases-page-content"
			hx-target="#databases-page-content"
			hx-swap="outerHTML transition:true"
			class="card w-full"
		>
			<div id="databases-tabs">
				@DatabasesTabs(selectedDbOverview)
			</div>
			@CreateDatabaseModal(selectedDbOverview.Type)
			@componentStructural.DeleteModal(
				"isDeleteDatabaseModalOpen", "closeDeleteDatabaseModal()",
				"deleteDatabaseElement('"+selectedDbOverview.Type.String()+"')",
				"database.name", "",
			)
			@CreateDatabaseUserModal(selectedDbOverview)
			@componentStructural.DeleteModal(
				"isDeleteDatabaseUserModalOpen", "closeDeleteDatabaseUserModal()",
				"deleteDatabaseUserElement('"+selectedDbOverview.Type.String()+"')",
				"databaseUser.username", "",
			)
		</div>
	</div>
}

templ DatabasesTabs(selectedDbOverview presenterDto.DatabaseOverview) {
	<!-- DatabasesTabs -->
	<!-- DatabasesTabs HorizontalTab Header -->
	@componentStructural.HorizontalTabHeader(
		[]componentStructural.TabHeaderItem{
			{Label: "MySQL/MariaDB/Percona", Icon: "ph-database", Value: "mariadb"},
			{Label: "PostgreSQL", Icon: "ph-database", Value: "postgresql"},
		}, selectedDbOverview.Type.String(), "changeSelectedDatabaseType",
	)
	<!-- DatabasesTabs HorizontalTab Table -->
	<div class="bg-os-800 -mt-4 rounded-b-xl rounded-r-xl p-4">
		<div class="bg-os-500 space-y-3 rounded-b-lg rounded-r-lg px-4 pt-2">
			if selectedDbOverview.IsInstalled {
				<table class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out">
					<!-- DatabasesTabs Table Header -->
					<thead class="text-xs uppercase text-neutral-400">
						<tr class="border-b border-neutral-500 border-opacity-90 text-center">
							<th scope="col" class="w-1/6 px-5 py-3 text-left">Name</th>
							<th scope="col" class="w-2/6 px-5 py-3 text-center">User(s)</th>
							<th scope="col" class="w-1/6 px-5 py-3 text-center">Size</th>
							<th scope="col" class="flex justify-end space-x-2 px-5 py-3">
								@componentForm.SubmitButton(
									"create-user-button", "Create user", "ph-user-plus",
									"openCreateDatabaseUserModal()", true,
								)
								@componentForm.SubmitButton(
									"create-database-button", "Create database", "ph-database",
									"openCreateDatabaseModal()", true,
								)
							</th>
						</tr>
					</thead>
					<tbody>
						<!-- DatabasesTabs Table Items -->
						for _, database := range selectedDbOverview.Databases {
							<tr class="odd:bg-os-300 even:bg-os-500 border-b border-neutral-500 border-opacity-30 text-center">
								<td scope="row" class="w-1/6 px-5 py-3 text-left font-normal">{ database.Name.String() }</td>
								<td scope="row" class="w-2/6 px-5 py-3 text-center">
									<div class="bg-os-500 max-h-75 rounded-md px-2.5 py-1">
										for _, user := range database.Users {
											<div class="bg-os-800 my-1.5 flex items-center justify-between rounded-md p-3">
												<span class="font-normal">{ user.Username.String() }</span>
												<div class="flex space-x-2">
													@componentStructural.CircularIconButtonWithTooltip(
														"ph-trash", "red-800", "red-600",
														"openDeleteDatabaseUserModal('"+database.Name.String()+"', '"+user.Username.String()+"')",
														"Delete user", "red-500",
													)
												</div>
											</div>
										}
									</div>
								</td>
								<td scope="row" class="w-1/6 px-5 py-3 text-center font-normal">
									{ database.Size.StringWithSuffix() }
								</td>
								<td scope="row" class="px-5 py-3 text-right">
									<div class="inline-flex">
										@componentStructural.CircularIconButtonWithTooltip(
											"ph-trash", "red-800", "red-600", "openDeleteDatabaseModal('"+database.Name.String()+"')",
											"Delete database", "red-500",
										)
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
				<div class="bg-os-500 p-0.5"></div>
			} else {
				@componentStructural.ServiceNotInstalledWarningForm(selectedDbOverview.Type.String())
			}
		</div>
	</div>
}

templ CreateDatabaseForm(selectedDbType valueObject.DatabaseType) {
	<!-- CreateDatabaseForm -->
	<form
		id="create-database-form"
		hx-post={ "/api/v1/database/" + selectedDbType.String() }
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<div class="my-6">
			@componentForm.InputField(componentForm.InputFieldDto{
				Type:               "text",
				Id:                 "dbName",
				Label:              "Database Name",
				BindModelValuePath: "database.name",
			})
		</div>
		@componentForm.DeactivableSubmitButton(
			"Create", "ph-check-fat", "closeCreateDatabaseModal()",
			"shouldDisableCreateDatabaseSubmitButton", false,
		)
	</form>
}

templ CreateDatabaseModal(selectedDbType valueObject.DatabaseType) {
	@componentStructural.RegularModal(
		"Create Database", "isCreateDatabaseModalOpen", "closeCreateDatabaseModal()", "",
	) {
		@CreateDatabaseForm(selectedDbType)
	}
}

func getOnlyDatabasesNames(selectedDbDatabases []entity.Database) []string {
	databasesNames := []string{}
	for _, database := range selectedDbDatabases {
		databasesNames = append(databasesNames, database.Name.String())
	}

	return databasesNames
}

templ CreateDatabaseUserForm(selectedDbOverview presenterDto.DatabaseOverview) {
	<!-- CreateDatabaseUserForm -->
	<form
		id="create-database-user-form"
		class="flex flex-col gap-5"
		hx-post={ "/api/v1/database/" + selectedDbOverview.Type.String() + "/user" }
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		@componentForm.SelectInput(
			"dbName", "Database Name", "database.name", "",
			getOnlyDatabasesNames(selectedDbOverview.Databases), true,
		)
		@componentForm.InputField(componentForm.InputFieldDto{
			Type:               "text",
			Id:                 "username",
			Label:              "Username",
			BindModelValuePath: "databaseUser.username",
		})
		@componentForm.PasswordInput(componentForm.PasswordInputDto{
			Id:                                "password",
			Label:                             "Password",
			BindModelPath:                     "databaseUser.password",
			ShouldIncludeGenRandomPassBtn:     true,
			ShouldIncludePassStrengthCriteria: true,
		})
		if selectedDbOverview.Type.String() == "mariadb" {
			@uiDisplay.Accordion(uiDisplay.AccordionSettings{
				Items: []uiDisplay.AccordionItemSettings{
					{
						Title:   "Privileges",
						Icon:    "ph-user-gear",
						Content: componentDatabases.DatabaseUserPrivilegesCheckboxInputsSwitchToggles(),
					},
				},
			})
		}
		@componentForm.DeactivableSubmitButton(
			"Create", "ph-check-fat", "closeCreateDatabaseUserModal()",
			"shouldDisableCreateDatabaseUserSubmitButton", false,
		)
	</form>
}

templ CreateDatabaseUserModal(
	selectedDbOverview presenterDto.DatabaseOverview,
) {
	@componentStructural.RegularModal(
		"Create Database User", "isCreateDatabaseUserModalOpen",
		"closeCreateDatabaseUserModal()", "",
	) {
		@CreateDatabaseUserForm(selectedDbOverview)
	}
}
