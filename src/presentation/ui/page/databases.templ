package page

import (
	"github.com/goinfinite/os/src/domain/entity"
	"github.com/goinfinite/os/src/domain/valueObject"
	componentDatabases "github.com/goinfinite/os/src/presentation/ui/component/databases"
	componentForm "github.com/goinfinite/os/src/presentation/ui/component/form"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
	presenterDto "github.com/goinfinite/os/src/presentation/ui/presenter/dto"
)

script DatabasesIndexLocalState() {
    document.addEventListener('alpine:init', () => {
		Alpine.data('databases', () => ({
			// Primary states
			database: {},
			databaseUser: {},
			resetPrimaryStates() {
				this.database = {
					'name': '',
					'size': ''
				}
				this.databaseUser = {
					'username': '',
					'password': '',
					'privileges': []
				}
			},
			init() {
				this.resetPrimaryStates();
			},

			// Auxiliary states
			changeSelectedDatabaseType(databaseType) {
				htmx.ajax(
					'GET',
					'/databases/?dbType=' + databaseType,
					{
						select: '#databases-page-content',
						target: '#databases-page-content',
						swap: 'outerHTML transition:true'
					},
				);
			},
			get shouldDisableCreateDatabaseSubmitButton() {
				return this.database.name == ''
			},
			get shouldDisableCreateDatabaseUserSubmitButton() {
				return this.database.name == '' || this.databaseUser.username == '' || this.databaseUser.password == ''
			},

			// Modal states
			isCreateDatabaseModalOpen: false,
			openCreateDatabaseModal() {
				this.resetPrimaryStates();                                                                                                                                                                                                  

				this.isCreateDatabaseModalOpen = true;
			},
			closeCreateDatabaseModal() {
				this.isCreateDatabaseModalOpen = false;
			},
			isDeleteDatabaseModalOpen: false,
			openDeleteDatabaseModal(databaseName) {
				this.resetPrimaryStates();

				this.database.name = databaseName;
				this.isDeleteDatabaseModalOpen = true;
			},
			closeDeleteDatabaseModal() {
				this.isDeleteDatabaseModalOpen = false;
			},
			deleteDatabaseElement(databaseType) {
				htmx.ajax(
					'DELETE',
					'/api/v1/database/' + databaseType + '/' + this.database.name + '/',
					{swap: 'none'},
				);
				this.closeDeleteDatabaseModal();
			},
			isCreateDatabaseUserModalOpen: false,
			openCreateDatabaseUserModal() {
				this.resetPrimaryStates();

				this.isCreateDatabaseUserModalOpen = true;
			},
			closeCreateDatabaseUserModal() {
				this.isCreateDatabaseUserModalOpen = false;
			},
			isDeleteDatabaseUserModalOpen: false,
			openDeleteDatabaseUserModal(databaseName, databaseUsername) {
				this.resetPrimaryStates();

				this.database.name = databaseName;
				this.databaseUser.username = databaseUsername;
				this.isDeleteDatabaseUserModalOpen = true;
			},
			closeDeleteDatabaseUserModal() {
				this.isDeleteDatabaseUserModalOpen = false;
			},
			deleteDatabaseUserElement(databaseType) {
				htmx.ajax(
					'DELETE',
					'/api/v1/database/' + databaseType + '/' + this.database.name + '/user/' + this.databaseUser.username + '/',
					{swap: 'none'},
				);
				this.closeDeleteDatabaseUserModal();
			},
		}))
	})
}

templ DatabasesIndex(selectedDbOverview presenterDto.DatabaseOverview) {
	@DatabasesIndexLocalState()
	<div class="flex flex-col" x-data="databases">
		<div class="mb-6 flex flex-row items-center justify-between">
			@componentStructural.PageTitle(
				"Databases",
				"Install the database services you need and manage each service individually by adding databases and users. Control user permissions by specifying what each user can and cannot do.",
				"ph-database",
			)
		</div>
		<div
			id="databases-page-content"
			hx-get={ "/databases/?dbType=" + selectedDbOverview.Type.String() }
			hx-trigger="submit from:form delay:500ms, click from:button#delete-element delay:500ms"
			hx-select="#databases-page-content"
			hx-target="#databases-page-content"
			hx-swap="outerHTML transition:true"
			class="card w-full"
		>
			<div id="databases-tabs">
				@DatabasesTabs(selectedDbOverview)
			</div>
			@CreateDatabaseModal(selectedDbOverview.Type)
			@componentStructural.DeleteModal(
				"isDeleteDatabaseModalOpen", "closeDeleteDatabaseModal()",
				"deleteDatabaseElement('"+selectedDbOverview.Type.String()+"')",
				"database.name", "",
			)
			@CreateDatabaseUserModal(selectedDbOverview)
			@componentStructural.DeleteModal(
				"isDeleteDatabaseUserModalOpen", "closeDeleteDatabaseUserModal()",
				"deleteDatabaseUserElement('"+selectedDbOverview.Type.String()+"')",
				"databaseUser.username", "",
			)
		</div>
	</div>
}

templ DatabasesTabs(selectedDbOverview presenterDto.DatabaseOverview) {
	@componentStructural.HorizontalTabHeader(
		[]componentStructural.TabHeaderItem{
			{Label: "MySQL/MariaDB/Percona", Icon: "ph-database", Value: "mariadb"},
			{Label: "PostgreSQL", Icon: "ph-database", Value: "postgresql"},
		}, selectedDbOverview.Type.String(), "changeSelectedDatabaseType",
	)
	<!-- DatabaseTabContent -->
	<div class="bg-os-800 -mt-4 rounded-b-xl rounded-r-xl p-4">
		<div class="bg-os-500 space-y-3 rounded-b-lg rounded-r-lg px-4 pt-2">
			if selectedDbOverview.IsInstalled {
				<table class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out">
					<thead class="text-xs uppercase text-neutral-400">
						<tr class="border-b border-neutral-500 border-opacity-90 text-center">
							<th scope="col" class="w-1/7 px-5 py-3 text-left">Name</th>
							<th scope="col" class="w-2/7 px-5 py-3 text-center">User(s)</th>
							<th scope="col" class="w-1/7 px-5 py-3 text-left">Size</th>
							<th scope="col" class="flex justify-end space-x-2 px-5 py-3">
								@componentForm.SubmitButton(
									"create-user-button", "Create user", "ph-user-plus",
									"openCreateDatabaseUserModal()", true,
								)
								@componentForm.SubmitButton(
									"create-database-button", "Create database", "ph-database",
									"openCreateDatabaseModal()", true,
								)
							</th>
						</tr>
					</thead>
					<tbody>
						for _, database := range selectedDbOverview.Databases {
							<tr class="bg-os-800 text-white">
								<th scope="row" class="w-1/4 px-5 py-3 text-left font-normal">{ database.Name.String() }</th>
								<th scope="row" class="w-1/4 px-5 py-3 text-left">
									<div class="bg-os-500 max-h-75 rounded-md px-2.5 py-1">
										for _, user := range database.Users {
											<div class="bg-os-800 my-1.5 flex items-center justify-between rounded-md p-3">
												<span class="font-normal">{ user.Username.String() }</span>
												<div class="flex space-x-2">
													@componentStructural.CircularIconButtonWithTooltip(
														"ph-trash", "red-800", "red-600",
														"openDeleteDatabaseUserModal('"+database.Name.String()+"', '"+user.Username.String()+"')",
														"Delete user", "red-500",
													)
												</div>
											</div>
										}
									</div>
								</th>
								<th scope="row" class="w-1/4 px-5 py-3 text-left font-normal">{ database.Size.String() }</th>
								<th scope="row" class="w-1/4 px-5 py-3 text-right">
									<div class="inline-flex">
										@componentStructural.CircularIconButtonWithTooltip(
											"ph-trash", "red-800", "red-600", "openDeleteDatabaseModal('"+database.Name.String()+"')",
											"Delete database", "red-500",
										)
									</div>
								</th>
							</tr>
						}
					</tbody>
				</table>
				<div class="bg-os-500 p-0.5"></div>
			} else {
				@componentStructural.ServiceNotInstalledWarningForm(selectedDbOverview.Type.String())
			}
		</div>
	</div>
}

templ CreateDatabaseForm(selectedDbType valueObject.DatabaseType) {
	<form
		id="create-database-form"
		hx-post={ "/api/v1/database/" + selectedDbType.String() }
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<div class="my-6">
			@componentForm.InputField(componentForm.InputFieldDto{
				Type:               "text",
				Id:                 "dbName",
				Label:              "Database Name",
				BindModelValuePath: "database.name",
			})
		</div>
		@componentForm.DeactivatableSubmitButton(
			"Create", "ph-check-fat", "closeCreateDatabaseModal()",
			"shouldDisableCreateDatabaseSubmitButton", false,
		)
	</form>
}

templ CreateDatabaseModal(selectedDbType valueObject.DatabaseType) {
	@componentStructural.Modal(
		"Create Database", "isCreateDatabaseModalOpen", "closeCreateDatabaseModal()", "",
	) {
		@CreateDatabaseForm(selectedDbType)
	}
}

func getOnlyDatabasesNames(selectedDbDatabases []entity.Database) []string {
	databasesNames := []string{}
	for _, database := range selectedDbDatabases {
		databasesNames = append(databasesNames, database.Name.String())
	}

	return databasesNames
}

templ CreateDatabaseUserForm(selectedDbOverview presenterDto.DatabaseOverview) {
	<form
		id="create-database-user-form"
		hx-post={ "/api/v1/database/" + selectedDbOverview.Type.String() + "/user" }
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<div class="my-6 space-y-6">
			@componentForm.SelectInput(
				"dbName", "Database Name", "database.name", "",
				getOnlyDatabasesNames(selectedDbOverview.Databases), true,
			)
			@componentForm.InputField(componentForm.InputFieldDto{
				Type:               "text",
				Id:                 "username",
				Label:              "Username",
				BindModelValuePath: "databaseUser.username",
			})
			@componentForm.PasswordInput(componentForm.PasswordInputDto{
				Id:                                "password",
				Label:                             "Password",
				BindModelPath:                     "databaseUser.password",
				ShouldIncludeGenRandomPassBtn:     true,
				ShouldIncludePassStrengthCriteria: true,
			})
			if selectedDbOverview.Type.String() == "mariadb" {
				<section class="mb-6 w-full rounded-md">
					<details class="bg-os-500 group rounded-md p-4 group-open:bg-opacity-30">
						<summary class="relative flex cursor-pointer list-none items-center pr-8 text-neutral-50 text-opacity-80 focus-visible:outline-none group-open:text-opacity-100 group-hover:text-opacity-100 [&::-webkit-details-marker]:hidden">
							<i class="ph-duotone ph-user-gear mr-2 text-2xl"></i>
							<span class="font-bold">Privileges</span>
							<i class="ph-bold ph-plus absolute right-0 top-1.5 text-xs transition duration-300 group-open:rotate-45"></i>
						</summary>
						@componentDatabases.DatabaseUserPrivilegesCheckboxInputsSwitchToggles()
					</details>
				</section>
			}
		</div>
		@componentForm.DeactivatableSubmitButton(
			"Create", "ph-check-fat", "closeCreateDatabaseUserModal()",
			"shouldDisableCreateDatabaseUserSubmitButton", false,
		)
	</form>
}

templ CreateDatabaseUserModal(
	selectedDbOverview presenterDto.DatabaseOverview,
) {
	@componentStructural.Modal(
		"Create Database User", "isCreateDatabaseUserModalOpen",
		"closeCreateDatabaseUserModal()", "",
	) {
		@CreateDatabaseUserForm(selectedDbOverview)
	}
}
