package page

import (
	"github.com/goinfinite/os/src/domain/dto"
	"github.com/goinfinite/os/src/domain/entity"
	"github.com/goinfinite/os/src/domain/valueObject"
	"github.com/goinfinite/os/src/infra/envs"
	componentForm "github.com/goinfinite/os/src/presentation/ui/component/form"
	componentMappings "github.com/goinfinite/os/src/presentation/ui/component/mappings"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
	"slices"
)

const (
	MappingsRecordsDisplayId               string = "mappings-table"
	MappingsRecordsDisplayRefreshEventName string = "refresh:" + MappingsRecordsDisplayId
)

templ MappingsIndex(
	vhostsWithMappings []dto.VirtualHostWithMappings,
	vhostsHostnames []string,
	installedServices []entity.InstalledService,
) {
	<!-- Mappings Page JavaScript -->
	<script src={ infraEnvs.LocalStatesAssetsPath + "/page/mappings.js" }></script>
	<!-- Mappings Page HTML -->
	<div x-data="mappings">
		<div class="mb-6 flex flex-row items-center justify-between gap-3">
			<div class="basis-[65%]">
				@componentStructural.PageTitle(
					"Mappings",
					"Configure how the server handles different URLs and paths. You can configure static files location, responses codes, redirect URLs, add inline HTML content, and proxy the traffic to services such as PHP, Node etc.",
					"ph-graph",
				)
			</div>
			<div class="flex basis-[35%] gap-3">
				@componentForm.SubmitButton(
					"create-vhost-button", "create virtual host", "ph-plus-square",
					"openCreateVirtualHostModal()", false,
				)
				@componentForm.SubmitButton(
					"create-mapping-button", "create mapping", "ph-plus-square",
					"openCreateMappingModal()", false,
				)
			</div>
		</div>
		@MappingsFormTable(vhostsWithMappings)
		@CreateVirtualHostModal(vhostsHostnames)
		@componentStructural.DeleteModal(
			"isDeleteVirtualHostModalOpen", "closeDeleteVirtualHostModal()", "deleteVirtualHostElement()",
			"virtualHost.hostname", "virtualHost.hostname",
		)
		@CreateMappingModal(vhostsHostnames, installedServices)
		@CreateMappingFromVirtualHostModal(vhostsHostnames, installedServices)
		@componentStructural.DeleteModal(
			"isDeleteMappingModalOpen", "closeDeleteMappingModal()", "deleteMappingElement()",
			"mapping.path", "mapping.id",
		)
	</div>
}

templ MappingsFormTable(vhostsWithMappings []dto.VirtualHostWithMappings) {
	<!-- MappingsFormTable -->
	<div
		id={ MappingsRecordsDisplayId }
		hx-get="/mappings/"
		hx-trigger={ MappingsRecordsDisplayRefreshEventName + " from:window" }
		hx-select={ "#" + MappingsRecordsDisplayId }
		hx-target={ "#" + MappingsRecordsDisplayId }
		hx-swap="outerHTML transition:true"
		class="flex flex-col"
	>
		for _, vhostWithMappings := range vhostsWithMappings {
			<div class="bg-os-800 mb-4 flex space-x-3 rounded-md p-3">
				<!-- VirtualHosts Column -->
				<div class="bg-os-500 min-w-2/8 max-2/8 min-h-56 flex flex-col rounded p-3">
					<div class="flex flex-wrap items-center justify-between gap-2">
						<span class="truncate text-lg font-bold">{ vhostWithMappings.Hostname.String() }</span>
						<div class="flex space-x-2">
							@componentStructural.CircularIconButtonWithTooltip(
								"ph-plus", "infinite-500", "infinite-300",
								"openCreateMappingFromVirtualHostModal('"+vhostWithMappings.Hostname.String()+"')",
								"create mapping", "os-200",
							)
							if vhostWithMappings.Type.String() != "primary" {
								@componentStructural.CircularIconButtonWithTooltip(
									"ph-trash", "red-800", "red-600",
									"openDeleteVirtualHostModal('"+vhostWithMappings.Hostname.String()+"')",
									"delete virtual host", "red-500",
								)
							}
						</div>
					</div>
					<div class="mt-4 flex flex-wrap gap-3">
						@componentStructural.Tag("ph-folder-open", "", vhostWithMappings.RootDirectory.String(), "infinite-300")
						@componentStructural.Tag("ph-file-text", "", vhostWithMappings.Type.String(), "infinite-300")
					</div>
				</div>
				<!-- Mappings Column -->
				<div class="w-full flex-col space-y-3">
					for _, mappingEntity := range vhostWithMappings.Mappings {
						@componentMappings.VirtualHostMappingsList(
							mappingEntity, vhostWithMappings.RootDirectory,
							"openDeleteMappingModal('"+mappingEntity.Id.String()+"','"+mappingEntity.Path.String()+"')",
						)
					}
				</div>
			</div>
		}
	</div>
}

templ CreateVirtualHostForm(existingHostnames []string) {
	<!-- CreateVirtualHostForm -->
	<form
		id="create-vhost-form"
		hx-post="/api/v1/vhosts/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		@submit="closeCreateVirtualHostModal()"
		@htmx:after-request={ "$dispatch('" + MappingsRecordsDisplayRefreshEventName + "')" }
	>
		<div class="my-6">
			@componentForm.SelectInput(
				"type", "Type", "virtualHost.type", "",
				valueObject.AvailableVirtualHostsTypes, false,
			)
		</div>
		<template x-if="virtualHost.type == 'top-level'">
			<div class="mb-6">
				@componentForm.InputField(componentForm.InputFieldDto{
					Type:               "text",
					Id:                 "hostname",
					Label:              "Hostname (e.g. example.com)",
					BindModelValuePath: "virtualHost.hostname",
				})
			</div>
		</template>
		<template x-if="virtualHost.type == 'subdomain'">
			<div class="mb-6 space-y-6">
				@componentForm.InputField(componentForm.InputFieldDto{
					Type:               "text",
					Id:                 "hostname",
					Label:              "Hostname (e.g. sub.example.com)",
					BindModelValuePath: "virtualHost.hostname",
				})
			</div>
		</template>
		<template x-if="virtualHost.type == 'alias'">
			<div class="mb-6 space-y-6">
				@componentForm.InputField(componentForm.InputFieldDto{
					Type:               "text",
					Id:                 "hostname",
					Label:              "Alias (e.g. example.com)",
					BindModelValuePath: "virtualHost.hostname",
				})
				@componentForm.SelectInput(
					"parentHostname", "Parent Hostname", "virtualHost.parentHostname", "",
					existingHostnames, false,
				)
			</div>
		</template>
		@componentForm.DeactivableSubmitButton(
			"Create", "ph-check-fat", "",
			"shouldDisableCreateVirtualHostSubmitButton", false,
		)
	</form>
}

templ CreateVirtualHostModal(existingHostnames []string) {
	@componentStructural.RegularModal(
		"Create Virtual Host", "isCreateVirtualHostModalOpen", "closeCreateVirtualHostModal()",
		"",
	) {
		@CreateVirtualHostForm(existingHostnames)
	}
}

templ CreateMappingForm(
	vhostsHostnames []string,
	installedServices []entity.InstalledService,
) {
	<!-- CreateMappingForm -->
	<form
		hx-post="/api/v1/vhosts/mapping/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		@submit="closeCreateMappingModal()"
		@htmx:after-request={ "$dispatch('" + MappingsRecordsDisplayRefreshEventName + "')" }
	>
		<div class="my-6 -mt-4 space-y-6">
			@componentMappings.MappingTypeRadioInput("targetType", "Type", "mapping.targetType")
			<template x-if="isCreateMappingFromVirtualHost">
				@componentForm.InputFieldReadOnly("text", "hostname", "Hostname", "virtualHost.hostname", "")
			</template>
			<template x-if="!isCreateMappingFromVirtualHost">
				@componentForm.SelectInput(
					"hostname", "Hostname", "virtualHost.hostname", "",
					vhostsHostnames, true,
				)
			</template>
			@componentForm.InputFieldWithPrefix(componentForm.InputFieldWithPrefixDto{
				Type:                "text",
				Id:                  "path",
				Label:               "Source URL",
				BindInputValuePath:  "mapping.path",
				BindPrefixValuePath: "vhostHostnameWithTrailingSlash",
			})
		</div>
		<template x-if="mapping.targetType == 'service'">
			<div class="mb-6 space-y-6">
				{{
					servicesNames := []string{}
					for _, serviceEntity := range installedServices {
						if len(serviceEntity.PortBindings) == 0 {
							continue
						}
						servicesNames = append(servicesNames, serviceEntity.Name.String())
					}
					slices.Sort(servicesNames)
				}}
				@componentForm.SelectInput(
					"targetValue", "Service Name", "mapping.targetValue", "", servicesNames, true,
				)
			</div>
		</template>
		<template x-if="mapping.targetType == 'url'">
			<div class="mb-6 space-y-6">
				@componentForm.InputField(componentForm.InputFieldDto{
					Type:               "text",
					Id:                 "targetValue",
					Label:              "Destination URL",
					BindModelValuePath: "mapping.targetValue",
				})
			</div>
		</template>
		<template x-if="mapping.targetType == 'inline-html'">
			<div class="mb-6 space-y-6">
				@componentForm.TextArea(componentForm.TextAreaDto{
					Id:                 "targetValue",
					Label:              "Inline HTML",
					BindModelValuePath: "mapping.targetValue",
				})
				@componentMappings.ResponseCodeSelectInput("targetHttpResponseCode", "Response Code", "mapping.targetHttpResponseCode")
			</div>
		</template>
		<template x-if="mapping.targetType == 'response-code'">
			<div class="mb-6 space-y-6">
				@componentMappings.ResponseCodeSelectInput("targetHttpResponseCode", "Response Code", "mapping.targetHttpResponseCode")
			</div>
		</template>
		<section class="mb-6 w-full rounded-md">
			<details class="bg-os-500 group rounded-md p-4 group-open:bg-opacity-30" x-bin:open="isAdvancedSettingsClosed">
				<summary class="relative flex cursor-pointer list-none items-center pr-8 text-neutral-50 text-opacity-80 focus-visible:outline-none group-open:text-opacity-100 group-hover:text-opacity-100 [&::-webkit-details-marker]:hidden">
					<i class="ph-duotone ph-gear mr-2 text-2xl"></i>
					<span class="font-bold">Advanced Settings</span>
					<i class="ph-bold ph-plus absolute right-0 top-1.5 text-xs transition duration-300 group-open:rotate-45"></i>
				</summary>
				<div class="mt-5 py-2">
					@componentMappings.MatchPatternSelectInput(
						"matchPattern", "Match Pattern", "mapping.matchPattern",
					)
				</div>
			</details>
		</section>
		@componentForm.DeactivableSubmitButton(
			"Create", "ph-check-fat", "",
			"shouldDisableCreateMappingSubmitButton", false,
		)
	</form>
}

templ CreateMappingModal(
	vhostsHostnames []string,
	installedServices []entity.InstalledService,
) {
	@componentStructural.RegularModal(
		"Create Mapping", "isCreateMappingModalOpen", "closeCreateMappingModal()",
		"",
	) {
		@CreateMappingForm(vhostsHostnames, installedServices)
	}
}

templ CreateMappingFromVirtualHostModal(
	vhostsHostnames []string,
	installedServices []entity.InstalledService,
) {
	@componentStructural.RegularModal(
		"Create Mapping", "isCreateMappingFromVirtualHostModalOpen",
		"closeCreateMappingModal()", "virtualHost.hostname",
	) {
		@CreateMappingForm(vhostsHostnames, installedServices)
	}
}
