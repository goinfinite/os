package page

import (
	"github.com/goinfinite/os/src/domain/entity"
	componentForm "github.com/goinfinite/os/src/presentation/ui/component/form"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
)

templ AccountsIndex(accountsEntities []entity.Account) {
	<!-- Accounts Page JavaScript -->
	<script src="/assets/local-states/page/accounts.js"></script>
	<!-- Accounts Page HTML -->
	<div x-data="accounts">
		<div class="mb-6 flex flex-row items-center justify-between">
			<div class="basis-[70%]">
				@componentStructural.PageTitle(
					"Accounts",
					"Create and manage accounts with their own API keys, allowing each one to access and use every Infinite OS resource individually.",
					"ph-users-three",
				)
			</div>
		</div>
		<div
			id="accounts-page-content"
			hx-get="/accounts/"
			hx-trigger="submit from:form delay:500ms, delete:account from:window delay:250ms, delete:secure-access-public-key from:window delay:250ms"
			hx-select="#accounts-page-content"
			hx-target="#accounts-page-content"
			hx-swap="outerHTML transition:true"
			class="flex flex-col"
		>
			<div id="accounts-table" class="card w-full">
				@AccountsTable(accountsEntities)
			</div>
		</div>
		@CreateAccountModal()
		@UpdatePasswordModal()
		@UpdateApiKeyModal()
		@componentStructural.DeleteModal(
			"isDeleteAccountModalOpen", "closeDeleteAccountModal()", "deleteAccount()",
			"account.username", "account.id",
		)
		@SecureAccessPublicKeysModal()
		@CreateSecureAccessPublicKeyModal()
		@componentStructural.DeleteModal(
			"isDeleteSecureAccessPublicKeyModalOpen", "closeDeleteSecureAccessPublicKeyModal()",
			"deleteSecureAccessPublicKey(); closeSecureAccessPublicKeysModal()",
			"secureAccessPublicKey.name", "secureAccessPublicKey.id",
		)
	</div>
}

templ AccountsTable(accountsEntities []entity.Account) {
	<!-- AccountsTable -->
	<div class="bg-os-800 rounded-md p-4">
		<div class="bg-os-500 space-y-3 rounded-md p-4">
			<table class="w-full table-auto border-collapse transition-all duration-300 ease-in-out">
				<!-- AccountsTable Header -->
				<thead class="text-xs uppercase text-neutral-400">
					<tr class="border-b border-neutral-500 border-opacity-90 text-center">
						<th scope="col" class="w-1/5 px-5 py-3 text-left">Username(s)</th>
						<th scope="col" class="w-1/5 px-5 py-3 text-center">UserId(s)/GroupId(s)</th>
						<th scope="col" class="w-1/5 px-5 py-3 text-center">Home Directory</th>
						<th scope="col" class="w-1/5 px-5 py-3 text-center">Created At</th>
						<th scope="col" class="flex justify-end py-3">
							<div class="mr-2">
								@componentForm.SubmitButton(
									"open-create-account-form-button", "Create account",
									"ph-user-plus", "openCreateAccountModal()", true,
								)
							</div>
						</th>
					</tr>
				</thead>
				<tbody>
					<!-- AccountsTable Items -->
					for _, accountEntity := range accountsEntities {
						<tr class="odd:bg-os-300 even:bg-os-500 border-b border-neutral-500 border-opacity-30 text-center">
							<th class="hidden">
								@templ.JSONScript("secureAccessPublicKeys_"+accountEntity.Id.String(), accountEntity.SecureAccessPublicKeys)
							</th>
							<th scope="row" class="w-1/5 px-5 py-3 text-left font-normal">
								<div class="flex items-center">
									{ accountEntity.Username.String() }
									if accountEntity.IsSuperAdmin {
										<div class="group/accountType translate-y-10% relative top-1/2 ml-2">
											<div class="bg-infinite-500 invisible absolute left-1/2 -mt-8 w-max -translate-x-1/2 rounded p-1.5 text-xs group-hover/accountType:visible group-hover/accountType:block">
												super admin
											</div>
											<i class="ph-bold ph-wrench text-infinite-500"></i>
										</div>
									}
								</div>
							</th>
							<th scope="row" class="w-1/5 px-5 py-3 text-center font-normal">{ accountEntity.Id.String() + "/" + accountEntity.GroupId.String() }</th>
							<th scope="row" class="w-1/5 px-5 py-3 text-center font-normal">{ accountEntity.HomeDirectory.String() }</th>
							<th scope="row" class="w-1/5 px-5 py-3 text-center font-normal">{ accountEntity.CreatedAt.ReadDateOnly() }</th>
							<th scope="row" class="px-5 py-3 text-right">
								<div class="inline-flex space-x-2">
									@componentStructural.CircularIconButtonWithTooltip(
										"ph-lock-key", "os-200", "os-100",
										"openUpdatePasswordModal("+accountEntity.Id.String()+")",
										"update password", "os-100",
									)
									@componentStructural.CircularIconButtonWithTooltip(
										"ph-key", "os-200", "os-100",
										"openUpdateApiKeyModal("+accountEntity.Id.String()+", '"+accountEntity.Username.String()+"')",
										"update api key", "os-100",
									)
									@componentStructural.CircularIconButtonWithTooltip(
										"ph-fingerprint", "os-200", "os-100",
										"openSecureAccessPublicKeysModal("+accountEntity.Id.String()+", '"+accountEntity.Username.String()+"')",
										"view secure access public keys", "os-100",
									)
									@componentStructural.CircularIconButtonWithTooltip(
										"ph-trash", "red-800", "red-600",
										"openDeleteAccountModal("+accountEntity.Id.String()+", '"+accountEntity.Username.String()+"')",
										"delete account", "red-500",
									)
								</div>
							</th>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ CreateAccountForm() {
	<!-- CreateAccountForm -->
	<form
		hx-post="/api/v1/account/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<div class="mb-6 space-y-6">
			@componentForm.InputField(componentForm.InputFieldDto{
				Type:               "text",
				Id:                 "username",
				Label:              "Username",
				BindModelValuePath: "account.username",
			})
			@componentForm.PasswordInput(componentForm.PasswordInputDto{
				Id:                                "password",
				Label:                             "Password",
				BindModelPath:                     "account.password",
				ShouldIncludeGenRandomPassBtn:     true,
				ShouldIncludePassStrengthCriteria: true,
			})
		</div>
		@componentForm.SubmitButton(
			"create-account-button", "Create", "ph-check-fat",
			"closeCreateAccountModal()", false,
		)
	</form>
}

templ CreateAccountModal() {
	@componentStructural.RegularModal(
		"Create Account", "isCreateAccountModalOpen", "closeCreateAccountModal()", "",
	) {
		@CreateAccountForm()
	}
}

templ UpdatePasswordForm() {
	<!-- UpdatePasswordForm -->
	<form
		hx-put="/api/v1/account/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<div class="mb-6">
			<input type="hidden" name="id" x-bind:value="account.id"/>
			@componentForm.PasswordInput(componentForm.PasswordInputDto{
				Id:                                "password",
				Label:                             "Password",
				BindModelPath:                     "account.password",
				ShouldIncludeGenRandomPassBtn:     true,
				ShouldIncludePassStrengthCriteria: true,
			})
		</div>
		@componentForm.SubmitButton(
			"update-account-password-button", "Update", "ph-key",
			"closeUpdatePasswordModal()", false,
		)
	</form>
}

templ UpdatePasswordModal() {
	@componentStructural.RegularModal(
		"Update Password", "isUpdatePasswordModalOpen", "closeUpdatePasswordModal()",
		"account.id",
	) {
		@UpdatePasswordForm()
	}
}

templ UpdateApiKeyContent() {
	<!-- UpdateApiKeyContent -->
	<div class="mb-6">
		@componentForm.TextAreaReadOnly("apiKey", "API Key", "account.apiKey")
		<div x-show="account.apiKey !== ''">
			@componentStructural.Alert(
				componentStructural.AlertTypeWarning,
				"This API key will not be stored on the server side. Please save it securely, as you will not be able to retrieve it again if lost. If you need to access your API key in the future, you will need to generate a new one.",
			)
		</div>
	</div>
	@componentForm.SubmitButton(
		"generate-new-api-key", "Generate new api key", "ph-key", "updateApiKey()",
		false,
	)
}

templ UpdateApiKeyModal() {
	@componentStructural.RegularModal(
		"Update Api Key", "isUpdateApiKeyModalOpen", "closeUpdateApiKeyModal()",
		"account.username",
	) {
		@UpdateApiKeyContent()
	}
}

templ SecureAccessPublicKeysList() {
	<!-- SecureAccessPublicKeysList -->
	@componentStructural.Alert(
		componentStructural.AlertTypeInfo,
		"These keys will be used by the secure remote connection service for user authentication. If the OpenSSH service is not installed, this connection will not be possible, making the keys irrelevant. But you cant still manage them.",
	)
	<div class="mt-2">
		<div id="account-secure-access-public-keys-list">
			<template x-for="key of account.secureAccessPublicKeys">
				<div class="bg-os-500 mt-2 flex rounded-md p-4">
					<div class="w-90% flex-col">
						<div class="flex items-center">
							<i class="ph-duotone ph-key mr-2 text-lg"></i>
							<p class="mb-0.5" x-text="key.name"></p>
						</div>
						<p x-text="key.fingerprint" class="max-w-150 text-xs italic text-slate-500"></p>
					</div>
					<div class="w-10% flex flex-col justify-center">
						<div class="ml-auto">
							@componentStructural.CircularIconButtonWithTooltip(
								"ph-trash", "red-800", "red-600",
								"openDeleteSecureAccessPublicKeyModal(key.id, key.name)",
								"delete public key", "red-500",
							)
						</div>
					</div>
				</div>
			</template>
		</div>
		<div class="flex">
			<div class="ml-auto mt-2">
				@componentForm.SubmitButton(
					"open-create-secure-access-public-key-modal",
					"create secure access public key", "ph-fingerprint",
					"openCreateSecureAccessPublicKeyModal()", true,
				)
			</div>
		</div>
	</div>
}

templ SecureAccessPublicKeysModal() {
	@componentStructural.RegularModal(
		"Secure Access Public Keys", "isSecureAccessPublicKeysModalOpen",
		"closeSecureAccessPublicKeysModal()", "account.username",
	) {
		@SecureAccessPublicKeysList()
	}
}

templ CreateSecureAccessPublicKeyForm() {
	<!-- CreateSecureAccessPublicKeyForm -->
	<form
		hx-post="/api/v1/account/secure-access-public-key"
		hx-indicator="#loading-overlay"
		hx-swap="none"
	>
		<div class="mb-6 space-y-6">
			<input type="hidden" name="accountId" x-bind:value="account.id"/>
			@componentForm.InputField(componentForm.InputFieldDto{
				Type:               "text",
				Id:                 "name",
				Label:              "Key name",
				BindModelValuePath: "secureAccessPublicKey.name",
				InfoTooltipContent: "Optional as long as there is a name in the key's content. Otherwise, must be provided.",
			})
			@componentForm.TextArea(componentForm.TextAreaDto{
				Id:                 "content",
				Label:              "Key content",
				BindModelValuePath: "secureAccessPublicKey.content",
				InfoTooltipContent: "If no name is provide, the name from the content added here will be used.",
			})
		</div>
		@componentForm.SubmitButton(
			"create-new-secure-access-public-key", "create secure access public key",
			"ph-check-fat",
			"closeCreateSecureAccessPublicKeyModal(); closeSecureAccessPublicKeysModal()",
			false,
		)
	</form>
}

templ CreateSecureAccessPublicKeyModal() {
	@componentStructural.RegularModal(
		"Create Secure Access Key", "isCreateSecureAccessPublicKeyModalOpen",
		"closeCreateSecureAccessPublicKeyModal()", "account.username",
	) {
		@CreateSecureAccessPublicKeyForm()
	}
}
