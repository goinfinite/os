package page

import (
	"github.com/goinfinite/os/src/domain/entity"
	"github.com/goinfinite/os/src/infra/envs"
	componentForm "github.com/goinfinite/os/src/presentation/ui/component/form"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
)

const (
	SslPairsRecordsDisplayId               string = "ssl-pairs-table"
	SslPairsRecordsDisplayRefreshEventName string = "refresh:" + SslPairsRecordsDisplayId
)

templ SslsIndex(sslPairs []entity.SslPair, vhostsHostnames []string) {
	<!-- SslPairsPage JavaScript -->
	<script src={ infraEnvs.LocalStatesAssetsPath + "/page/ssls.js" }></script>
	<!-- SslPairsPage HTML -->
	<div x-data="ssls">
		@componentStructural.PageTitle(
			"SSL Certificate",
			"Import, view, and swap your virtual host SSL certificates.",
			"ph-lock",
		)
		@SslPairsTable(sslPairs)
		<p class="mt-4 text-xs text-neutral-400">
			NOTE: To update SSL certificates for aliases, you need to update the SSL certificate of the parent virtual host, as aliases do not have their own SSL certificates.
		</p>
		@ImportSslCertificateModal(vhostsHostnames)
		@ViewPemFilesModal()
		@SwapToSelfSignedModal()
	</div>
}

templ SslPairsTable(sslPairEntities []entity.SslPair) {
	<!-- SslPairsTable -->
	<div
		id={ SslPairsRecordsDisplayId }
		hx-get="/ssls/"
		hx-trigger={ SslPairsRecordsDisplayRefreshEventName + " from:window" }
		hx-select={ "#" + SslPairsRecordsDisplayId }
		hx-target={ "#" + SslPairsRecordsDisplayId }
		hx-indicator="#loading-overlay"
		hx-swap="outerHTML transition:true"
		class="flex flex-col gap-4 rounded-lg bg-neutral-950/20 p-5"
	>
		<table class="w-full table-fixed border-collapse rounded-md transition-all duration-300 ease-in-out">
			<!-- SslPairsTable Header -->
			<thead class="bg-neutral-950/20 text-xs uppercase text-neutral-400">
				<tr class="*:p-3 border-y border-neutral-50/10 text-center">
					<th scope="col" class="w-[25%] text-left">Virtual Hosts</th>
					<th scope="col" class="w-[15%]">Issued At</th>
					<th scope="col" class="w-[15%]">Expires At</th>
					<th scope="col" class="w-[25%]">Certificate Authority (CA)</th>
					<th scope="col" class="w-[20%]">
						@componentForm.SubmitButton(
							"import-ssl-certificate-button", "Import SSL certificate",
							"ph-plus-square", "openImportSslCertificateModal()", false,
						)
					</th>
				</tr>
			</thead>
			<tbody>
				for _, sslPairEntity := range sslPairEntities {
					@templ.JSONScript("sslPairEntity_"+sslPairEntity.Id.String(), sslPairEntity)
					<tr class="*:py-4 *:px-2.5 border-b border-neutral-50/10 text-center last:border-b-0 even:bg-neutral-500/5">
						<td class="text-left">
							<p class="font-bold">{ sslPairEntity.VirtualHostHostname.String() }</p>
							<p class="text-infinite-500 text-[0.6rem]">#{ sslPairEntity.Id.String()[0:12] }</p>
							<p class="mt-3 text-[0.75rem] font-bold text-neutral-300">
								subject alternative names (SANs)
							</p>
							<div class="mt-0.5 flex flex-col items-center rounded-lg bg-neutral-500/5 text-xs">
								for _, altName := range sslPairEntity.Certificate.AltNames {
									<div class="flex w-full items-center justify-between border-t-2 border-neutral-500/20 px-3 py-1.5 first:border-t-0">
										{ altName.String() }
									</div>
								}
							</div>
						</td>
						<td>{ sslPairEntity.Certificate.IssuedAt.ReadDateOnly() }</td>
						<td>
							{{ expiresAtIcon := "ph-warning" }}
							{{ expiresAtIconColor := "text-amber-500" }}
							if sslPairEntity.Certificate.ExpiresAt.IsFuture() {
								{{ expiresAtIcon = "ph-check-circle" }}
								{{ expiresAtIconColor = "text-green-500" }}
							}
							{ sslPairEntity.Certificate.ExpiresAt.ReadDateOnly() }
							<i class={ "ph-bold text-xs " + expiresAtIcon + " " + expiresAtIconColor }></i>
						</td>
						<td>
							<div>
								{{ caIcon := "ph-warning" }}
								{{ caIconColor := "text-amber-500" }}
								if !sslPairEntity.Certificate.CertificateAuthority.IsSelfSigned() {
									{{ caIcon = "ph-check-circle" }}
									{{ caIconColor = "text-green-500" }}
								}
								{ sslPairEntity.Certificate.CertificateAuthority.String() }
								<i class={ "ph-bold text-xs " + caIcon + " " + caIconColor }></i>
							</div>
						</td>
						<td>
							<div class="inline-flex space-x-2">
								@componentStructural.CircularIconButtonWithTooltip(
									"ph-file-magnifying-glass", "neutral-50/10", "neutral-50/30",
									"openViewPemFilesModal('"+sslPairEntity.Id.String()+"')",
									"view PEM files", "neutral-50/10",
								)
								@componentStructural.CircularIconButtonWithTooltip(
									"ph-swap", "red-800", "red-600",
									"openSwapToSelfSignedModal('"+sslPairEntity.Id.String()+"')",
									"swap to self-signed", "red-500",
								)
								@componentStructural.CircularIconButtonWithTooltip(
									"ph-certificate", "teal-800", "teal-600",
									"createPubliclyTrusted('"+sslPairEntity.VirtualHostHostname.String()+"')",
									"issue publicly trusted certificate", "teal-500",
								)
							</div>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ ImportSslCertificateForm(vhostsHostnames []string) {
	<!-- ImportSslCertificateForm -->
	<form
		id="import-ssl-certificate-form"
		hx-post="/api/v1/ssl/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		@submit="closeImportSslCertificateModal()"
		@htmx:after-request={ "$dispatch('" + SslPairsRecordsDisplayRefreshEventName + "')" }
	>
		<div class="my-6">
			@componentForm.MultiSelectInput(
				"virtualHosts", "Virtual Hosts Hostnames",
				"sslPair.virtualHostsHostnames", vhostsHostnames,
			)
		</div>
		<div class="mb-4 space-y-6" x-show="!shouldImportSslCertificateAsFile">
			@componentForm.TextArea(componentForm.TextAreaDto{
				Id:                 "certificate",
				Label:              "Certificate",
				BindModelValuePath: "sslPair.certificate",
			})
			@componentForm.TextArea(componentForm.TextAreaDto{
				Id:                 "key",
				Label:              "Private Key",
				BindModelValuePath: "sslPair.key",
			})
		</div>
		<div class="mb-4 space-y-6" x-show="shouldImportSslCertificateAsFile">
			@componentForm.FileUploadTextInputFileContentReader(
				"certificate", "Certificate", "sslPair.certificate", ".crt",
			)
			@componentForm.FileUploadTextInputFileContentReader(
				"key", "Private Key", "sslPair.key", ".key",
			)
		</div>
		<div class="mb-6 flex justify-end">
			@componentForm.CheckboxInputSwitchToggle(componentForm.CheckboxInputSwitchToggleDto{
				Id:            "change-import-ssl-certificate-form-radio-input",
				Label:         "OR upload files (.crt/.key - pem format)",
				BindModelPath: "shouldImportSslCertificateAsFile",
			})
		</div>
		@componentForm.DeactivableSubmitButton(
			"Import SSL certificate", "ph-check-fat", "",
			"shouldDisableImportSslCertificateSubmitButton", false,
		)
	</form>
}

templ ImportSslCertificateModal(vhostsHostnames []string) {
	@componentStructural.RegularModal(
		"Import SSL certificate", "isImportSslCertificateModalOpen",
		"closeImportSslCertificateModal()", "",
	) {
		@ImportSslCertificateForm(vhostsHostnames)
	}
}

templ ViewPemFilesModal() {
	<!-- ViewPemFilesModal -->
	@componentStructural.RegularModal(
		"PEM files", "isViewPemFilesModalOpen",
		"closeViewPemFilesModal()", "",
	) {
		<div class="space-y-6">
			@componentForm.InputFieldReadOnly("text", "id", "Ssl Pair Id", "sslPair.id", "")
			<div class="space-y-1">
				@componentForm.TextAreaReadOnly(componentForm.TextAreaReadOnlyDto{
					Id:                 "certificate",
					Label:              "Certificate",
					BindModelValuePath: "sslPair.certificate",
				})
				@componentForm.SubmitButton(
					"download-certificate-pem-file-button", "Download certificate",
					"ph-download-simple", "downloadPemFile(false)", false,
				)
			</div>
			<div class="space-y-1">
				@componentForm.TextAreaReadOnly(componentForm.TextAreaReadOnlyDto{
					Id:                 "key",
					Label:              "Private Key",
					BindModelValuePath: "sslPair.key",
				})
				@componentForm.SubmitButton(
					"download-key-pem-file-button", "Download private key",
					"ph-download-simple", "downloadPemFile(true)", false,
				)
			</div>
		</div>
	}
}

templ SwapToSelfSignedCriticalWarningContent() {
	<!-- SwapToSelfSignedCriticalWarningContent -->
	<h3 class="text-pretty mb-3 text-xl font-bold leading-relaxed">
		Are you sure you want to swap SSL certificate?
	</h3>
	<p>This process cannot be undone. Only use this action if you no longer want to use your current SSL certificate. The system will swap the current certificate with a self-signed SSL until it's able to issue a new valid Let's Encrypt SSL certificate.</p>
}

templ SwapToSelfSignedModal() {
	@componentStructural.CriticalModal(
		"isSwapToSelfSignedModalOpen", "closeSwapToSelfSignedModal()",
		"Cancel", "swapToSelfSigned()", "swap-to-self-signed-button",
		"ph-swap", "Yes, swap ssl certificate",
	) {
		@SwapToSelfSignedCriticalWarningContent()
	}
}
