package page

import (
	"github.com/goinfinite/os/src/domain/entity"
	componentForm "github.com/goinfinite/os/src/presentation/ui/component/form"
	componentMisc "github.com/goinfinite/os/src/presentation/ui/component/misc"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
)

script OverviewIndexLocalState() {
    document.addEventListener('alpine:init', () => {
		Alpine.data('marketplace', () => ({
			// Primary States
			marketplaceItem: {},
			get hostnameWithTrailingSlash() {
				return this.marketplaceItem.hostname + "/";
			},
			get dataFieldsAsString() {
				let dataFieldsAsString = "";
				for (let dataField of this.marketplaceItem.dataFields) {
					if (!dataField.value) {
						continue
					}

					dataFieldsAsString += dataField.name + ':' + dataField.value + ';';
				}
				return dataFieldsAsString.slice(0, -1);
			},
			resetPrimaryStates() {
				this.marketplaceItem = {
					id: '',
					name: '',
					hostname: '',
					urlPath: '',
					dataFields: [],
				};
			},
			init() {
				this.resetPrimaryStates();
			},

			// Auxiliary States
			selectedMarketplaceItemType: 'apps',
			selectedMarketplaceItemId: 0,
			updateSelectedMarketplaceItem(marketplaceItemId) {
				this.selectedMarketplaceItemId = marketplaceItemId;

				const catalogItemEntity = JSON.parse(
					document.getElementById('marketplaceCatalogItem_'+marketplaceItemId).textContent
				);
				this.marketplaceItem.id = marketplaceItemId;
				this.marketplaceItem.name = catalogItemEntity.name;

				this.marketplaceItem.dataFields = [];
				for (const dataField of catalogItemEntity.dataFields) {
					dataField.value = dataField.defaultValue;
					this.marketplaceItem.dataFields.push(dataField);
				}
			},
			resetAuxiliaryStates() {
				this.selectedMarketplaceItemType = 'apps';
				this.selectedMarketplaceItemId = 0;
			},

			// Modal States
			isScheduleMarketplaceItemInstallationModalOpen: false,
			openScheduleMarketplaceItemInstallationModal() {
				this.resetPrimaryStates();
				this.resetAuxiliaryStates();
				this.isScheduleMarketplaceItemInstallationModalOpen = true;
			},
			closeScheduleMarketplaceItemInstallationModal() {
				this.isScheduleMarketplaceItemInstallationModalOpen = false;
			},
			isUninstallMarketplaceItemModalOpen: false,
			openUninstallMarketplaceItemModal(installedItemId, installedItemName) {
				this.resetPrimaryStates();

				this.marketplaceItem.id = installedItemId;
				this.marketplaceItem.name = installedItemName;
				this.isUninstallMarketplaceItemModalOpen = true;
			},
			closeUninstallMarketplaceItemModal() {
				this.isUninstallMarketplaceItemModalOpen = false;
			},
			uninstallMarketplaceItem() {
				htmx.ajax(
					'DELETE',
					'/api/v1/marketplace/installed/' + this.marketplaceItem.id + '/',
					{swap: 'none'},
				);
				this.$store.main.refreshScheduledTasksPopover();
				this.closeUninstallMarketplaceItemModal();
			},
		}));

		Alpine.data('resourceUsage', () => ({
		}));

		Alpine.data('services', () => ({
		}));
	})
}

templ OverviewIndex(
	vhostsHostnames []string,
	marketplaceOverview MarketplaceOverview,
) {
	@OverviewIndexLocalState()
	<div class="flex flex-col">
		<div class="mb-6 flex flex-row items-center justify-between">
			@componentStructural.PageTitle(
				"Overview",
				"Welcome! Take a quick peek at your installed services and marketplace items, as well as Infinite OS performance such as the server resource usage and system information.",
				"ph-speedometer",
			)
		</div>
		<div id="marketplace" class="card w-full" x-data="marketplace">
			@InstalledMarketplaceItemsTable(marketplaceOverview.InstalledItemsList)
			@componentStructural.ScheduleDeletionModal(
				"isUninstallMarketplaceItemModalOpen",
				"closeUninstallMarketplaceItemModal()",
				"uninstallMarketplaceItem()", "marketplaceItem.name",
				"marketplaceItem.id",
			)
			@ScheduleMarketplaceItemInstallationModal(
				vhostsHostnames, marketplaceOverview.CatalogItemsList,
			)
		</div>
	</div>
}

templ InstalledMarketplaceItemsTable(installedItemsList []entity.MarketplaceInstalledItem) {
	<div class="bg-os-800 p-5">
		<h2 class="mb-2 text-2xl">Marketplace</h2>
		<table class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out">
			<thead class="bg-os-500 text-xs uppercase text-neutral-400">
				<tr class="border-b border-neutral-500 border-opacity-90 text-center">
					<th scope="col" class="w-20% px-5 py-3 text-left">Name</th>
					<th scope="col" class="w-15% px-5 py-3">Type/Installation Path</th>
					<th scope="col" class="w-20% px-5 py-3">Installation Directory</th>
					<th scope="col" class="w-15% px-5 py-3">Created At</th>
					<th scope="col" class="flex justify-end py-3">
						<div class="mr-2">
							@componentForm.SubmitButton(
								"", "Install catalog item", "ph-storefront",
								"openScheduleMarketplaceItemInstallationModal()", false,
							)
						</div>
					</th>
				</tr>
			</thead>
			<tbody>
				for _, installedItem := range installedItemsList {
					<tr class="odd:bg-os-200 even:bg-os-400 border-b border-neutral-500 border-opacity-30 text-center">
						<th scope="row" class="px-5 py-3 text-left font-normal">
							<div class="inline-flex items-center">
								<img class="mr-2 h-10 w-10 rounded-full" src={ installedItem.AvatarUrl.String() }/>
								{ installedItem.Name.String() }
							</div>
						</th>
						<th scope="row" class="flex justify-center px-5 py-3 font-normal">
							@componentStructural.Tag(
								"", installedItem.Type.String(),
								installedItem.Hostname.String()+installedItem.UrlPath.String(),
								"infinite-500",
							)
						</th>
						<th scope="row" class="px-5 py-3 font-normal">{ installedItem.InstallDirectory.String() }</th>
						<th scope="row" class="px-5 py-3 font-normal">{ installedItem.CreatedAt.ReadDateOnly() }</th>
						<th scope="row" class="px-5 py-3 text-right font-normal">
							<div class="inline-flex">
								@componentStructural.CircularIconButtonWithTooltip(
									"ph-trash", "red-800", "red-600",
									"openUninstallMarketplaceItemModal("+installedItem.Id.String()+", '"+installedItem.Name.String()+"')",
									"Uninstall", "red-500",
								)
							</div>
						</th>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ MarketplaceCatalogItemsCarousel(catalogItemEntity entity.MarketplaceCatalogItem) {
	<div class="flex grid justify-center gap-x-14">
		<!-- MarketplaceCatalogItemsCarousel JavaScript -->
		@templ.JSONScript("marketplaceCatalogItem_"+catalogItemEntity.Id.String(), catalogItemEntity)
		<!-- MarketplaceCatalogItemsCarousel HTML -->
		<div
			@click={ "updateSelectedMarketplaceItem(" + catalogItemEntity.Id.String() + ")" }
			class="bg-os-500 hover:ring-infinite-500 hover:text-infinite-500 group relative flex cursor-pointer flex-col items-center justify-center rounded-md p-2 transition-all duration-300 hover:ring-1"
			:class={ "{'text-infinite-500 ring-1 ring-infinite-500': selectedMarketplaceItemId === " + catalogItemEntity.Id.String() + "}" }
		>
			<img
				src={ catalogItemEntity.AvatarUrl.String() }
				alt={ catalogItemEntity.Name.String() + " Avatar" }
				class="max-w-18 m-auto rounded-md transition-all duration-300 group-hover:sepia"
				:class={ "{'sepia': selectedMarketplaceItemId === " + catalogItemEntity.Id.String() + "}" }
			/>
			<div class="text-wrap mt-1 break-words text-center text-xs">
				{ catalogItemEntity.Name.String() }
			</div>
			<div class="bg-os-600 min-w-100 absolute left-1/2 top-full z-10 mt-1 hidden -translate-x-1/2 transform rounded-md p-3 text-xs text-neutral-50 shadow-lg transition-all duration-500 group-hover:block group-hover:translate-y-0.5">
				<div class="flex flex-row items-center gap-3">
					<div class="basis-3/4 text-xs">
						{ catalogItemEntity.Description.String() }
					</div>
					<div class="basis-1/4 space-y-1.5">
						@componentStructural.TinyTag(
							"ph-memory", "", catalogItemEntity.ManifestVersion.String(), "infinite-500",
						)
						@componentStructural.TinyTag(
							"ph-hard-drives", "", catalogItemEntity.EstimatedSizeBytes.StringWithSuffix(), "infinite-500",
						)
					</div>
				</div>
			</div>
		</div>
	</div>
}

func transformMarketplaceCatalogItemsIntoCarouselItems(
	catalogItems []entity.MarketplaceCatalogItem,
) []templ.Component {
	carouselItems := []templ.Component{}
	for _, itemEntity := range catalogItems {
		carouselItem := MarketplaceCatalogItemsCarousel(itemEntity)
		carouselItems = append(carouselItems, carouselItem)
	}

	return carouselItems
}

templ ScheduleMarketplaceItemInstallationForm(
	vhostsHostnames []string,
	marketplaceCatalogItems CatalogItemsGroupedByType,
) {
	<form
		id="schedule-marketplace-item-installation-form"
		hx-post="/api/v1/marketplace/catalog/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		@submit="$store.main.refreshScheduledTasksPopover()"
	>
		<input type="hidden" name="id" :value="marketplaceItem.id"/>
		<input type="hidden" name="dataFields" :value="dataFieldsAsString"/>
		<div class="my-6 space-y-2">
			<div class="w-100% inline-flex space-x-2">
				<div class="w-60%">
					@componentForm.SelectInput(
						"hostname", "Hostname", "marketplaceItem.hostname",
						"", vhostsHostnames, true,
					)
				</div>
				<div class="w-40%">
					@componentForm.InputFieldWithPrefix(componentForm.InputFieldWithPrefixDto{
						Type:                "text",
						Id:                  "urlPath",
						Label:               "URL Path",
						BindInputValuePath:  "marketplaceItem.urlPath",
						BindPrefixValuePath: "hostnameWithTrailingSlash",
						InfoTooltipContent:  "Path where the respective installed item will be available for access.",
					})
				</div>
			</div>
			<div class="bg-os-500 flex flex-col gap-4 rounded-md p-3">
				<div class="flex justify-stretch gap-4">
					@componentStructural.VerticalTabHeader(
						[]componentStructural.TabHeaderItem{
							{Label: "Apps", Value: "apps"},
							{Label: "Frameworks", Value: "frameworks"},
							{Label: "Stacks", Value: "stacks"},
						}, "selectedMarketplaceItemType",
					)
					<!-- MarketplaceVerticalTabContent -->
					<div class="flex w-full justify-center">
						<div x-show="selectedMarketplaceItemType === 'apps'">
							@componentMisc.MultiItemCarousel(
								"marketplaceAppItemsCarousel",
								transformMarketplaceCatalogItemsIntoCarouselItems(marketplaceCatalogItems.Apps),
								4,
							)
						</div>
						<div x-show="selectedMarketplaceItemType === 'frameworks'">
							@componentMisc.MultiItemCarousel(
								"marketplaceFrameworksItemsCarousel",
								transformMarketplaceCatalogItemsIntoCarouselItems(marketplaceCatalogItems.Frameworks),
								4,
							)
						</div>
						<div x-show="selectedMarketplaceItemType === 'stacks'">
							@componentMisc.MultiItemCarousel(
								"marketplaceStacksItemsCarousel",
								transformMarketplaceCatalogItemsIntoCarouselItems(marketplaceCatalogItems.Stacks),
								4,
							)
						</div>
					</div>
				</div>
			</div>
			<template x-if="marketplaceItem.dataFields.length > 0">
				@componentStructural.CollapsibleSection("Install Parameters", "ph-brackets-curly", true) {
					@componentStructural.Alert(
						componentStructural.AlertTypeWarning,
						"All fields without pre-filled values must be completed as they are required. Otherwise, the installation will fail!",
					)
					<div class="mt-6 grid grid-cols-2 gap-4">
						<template x-for="dataField in marketplaceItem.dataFields">
							<div>
								<template x-if="dataField.type === 'text' || dataField.type === 'email'">
									@componentForm.InputFieldClientSide(
										"dataField.type", "dataField.label", "dataField.value",
									)
								</template>
								<template x-if="dataField.type === 'password'">
									@componentForm.PasswordInputClientSide(
										"dataField.label", "dataField.value", true,
									)
								</template>
								<template x-if="dataField.type === 'select'">
									@componentForm.SelectInputClientSide(componentForm.SelectInputClientSideDto{
										BindLabel:     "dataField.label",
										BindModelPath: "dataField.value",
										BindOptions:   "dataField.options",
									})
								</template>
							</div>
						</template>
					</div>
				}
			</template>
		</div>
		@componentForm.SubmitButton(
			"install-marketplace-item-button", "Schedule installation",
			"ph-queue", "closeScheduleMarketplaceItemInstallationModal()", false,
		)
	</form>
}

templ ScheduleMarketplaceItemInstallationModal(
	vhostsHostnames []string,
	marketplaceCatalogItems CatalogItemsGroupedByType,
) {
	@componentStructural.RegularModal(
		"Install marketplace item", "isScheduleMarketplaceItemInstallationModalOpen",
		"closeScheduleMarketplaceItemInstallationModal()", "",
	) {
		@ScheduleMarketplaceItemInstallationForm(
			vhostsHostnames, marketplaceCatalogItems,
		)
	}
}
