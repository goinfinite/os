package page

import (
	"fmt"
	"github.com/goinfinite/os/src/domain/dto"
	"github.com/goinfinite/os/src/domain/entity"
	"github.com/goinfinite/os/src/domain/valueObject"
	componentForm "github.com/goinfinite/os/src/presentation/ui/component/form"
	componentMisc "github.com/goinfinite/os/src/presentation/ui/component/misc"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
	"math"
	"strconv"
)

type InstallableServicesGroupedByType struct {
	Runtime   []entity.InstallableService
	Database  []entity.InstallableService
	Webserver []entity.InstallableService
	Other     []entity.InstallableService
}

type ServicesOverview struct {
	InstalledServicesResponseDto dto.ReadInstalledServicesItemsResponse
	InstallableServices          InstallableServicesGroupedByType
}

script OverviewIndexLocalState(installedServicesCurrentPageNumber int) {
    document.addEventListener('alpine:init', () => {
		Alpine.data('marketplace', () => ({
			// Primary States
			marketplaceItem: {},
			get hostnameWithTrailingSlash() {
				return this.marketplaceItem.hostname + "/";
			},
			get dataFieldsAsString() {
				let dataFieldsAsString = "";
				for (let dataField of this.marketplaceItem.dataFields) {
					if (!dataField.value) {
						continue
					}

					dataFieldsAsString += dataField.name + ':' + dataField.value + ';';
				}
				return dataFieldsAsString.slice(0, -1);
			},
			resetPrimaryStates() {
				this.marketplaceItem = {
					id: '',
					name: '',
					hostname: '',
					urlPath: '',
					dataFields: [],
				};
			},
			init() {
				this.resetPrimaryStates();
			},

			// Auxiliary States
			selectedMarketplaceItemType: 'apps',
			selectedMarketplaceItemId: 0,
			updateSelectedMarketplaceItem(marketplaceItemId) {
				this.selectedMarketplaceItemId = marketplaceItemId;

				const catalogItemEntity = JSON.parse(
					document.getElementById('marketplaceCatalogItem_'+marketplaceItemId).textContent
				);
				this.marketplaceItem.id = marketplaceItemId;
				this.marketplaceItem.name = catalogItemEntity.name;

				this.marketplaceItem.dataFields = [];
				for (const dataField of catalogItemEntity.dataFields) {
					dataField.value = dataField.defaultValue;
					this.marketplaceItem.dataFields.push(dataField);
				}
			},
			resetAuxiliaryStates() {
				this.selectedMarketplaceItemType = 'apps';
				this.selectedMarketplaceItemId = 0;
			},

			// Modal States
			isMarketplaceItemInstallationModalOpen: false,
			openMarketplaceItemInstallationModal() {
				this.resetPrimaryStates();
				this.resetAuxiliaryStates();
				this.isMarketplaceItemInstallationModalOpen = true;
			},
			closeMarketplaceItemInstallationModal() {
				this.isMarketplaceItemInstallationModalOpen = false;
			},
			isUninstallMarketplaceItemModalOpen: false,
			openUninstallMarketplaceItemModal(installedItemId, installedItemName) {
				this.resetPrimaryStates();

				this.marketplaceItem.id = installedItemId;
				this.marketplaceItem.name = installedItemName;
				this.isUninstallMarketplaceItemModalOpen = true;
			},
			closeUninstallMarketplaceItemModal() {
				this.isUninstallMarketplaceItemModalOpen = false;
			},
			uninstallMarketplaceItem() {
				htmx.ajax(
					'DELETE',
					'/api/v1/marketplace/installed/' + this.marketplaceItem.id + '/',
					{swap: 'none'},
				).then(() => this.$store.main.refreshScheduledTasksPopover());
				this.closeUninstallMarketplaceItemModal();
			},
		}));

		Alpine.data('resourceUsage', () => ({
			// Auxiliary States
			refreshIntervalSecs: 20,
			async updateResourceUsageCharts(chartInstance) {
				const o11yCurrentUsageResource = await fetch('/api/v1/o11y/overview/', {
					method: 'GET',
					headers: {
						Accept: 'application/json',
						'Content-Type': 'application/json',
					},
				})
					.then((apiResponse) => {
						if (!apiResponse.ok) {
							throw new Error('BadHttpResponseCode: ' + apiResponse.status);
						}

						return apiResponse.json();
					})
					.then((jsonResponse) => jsonResponse.body.currentUsage)
					.catch((error) => {
						console.error('ReadO11yOverviewError: ' + error);
						return null;
					});

				if (!o11yCurrentUsageResource) {
					return;
				}

				const currentChartData = chartInstance.data('resourceUsage');
				if (currentChartData.length >= 15) {
					const removedOldestValue = vega.changeset().remove(currentChartData[0]);
					chartInstance.change('resourceUsage', removedOldestValue).run();
				}

				const formattedTime = new Date().toLocaleTimeString(
					'pt-BR', { hour: '2-digit', minute: '2-digit', second: '2-digit' },
				);
				const newChartValue = vega.changeset().insert({
					time: formattedTime,
					cpuUsagePercent: o11yCurrentUsageResource.cpuUsagePercent / 100,
					memUsagePercent: o11yCurrentUsageResource.memUsagePercent / 100,
					storageUsagePercent: o11yCurrentUsageResource.storageUsage / 100,
				});
				chartInstance.change('resourceUsage', newChartValue).run();
			},

			init() {
				const chartConfig = {
					$schema: 'https://vega.github.io/schema/vega-lite/v5.json',
					data: { name: 'resourceUsage' },
					background: null,
					autosize: { type: 'fit', resize: true },
					width: 'container',
					height: 'container',
					encoding: {
						x: {
							field: 'time',
							type: 'ordinal',
							axis: {
								title: null,
								labelColor: '#FFFFFF',
								labelAngle: 0,
								labelFontWeight: 'bold',
								grid: true,
								gridOpacity: 0.1
							}
						}
					},
					transform: [{ fold: ['cpuUsagePercent', 'memUsagePercent', 'storageUsagePercent'] }],
					layer: [
						{
							encoding: {
								y: {
									field: 'value',
									type: 'quantitative',
									axis: {
										title: null,
										labelColor: '#FFFFFF',
										labelFontWeight: 'bold',
										grid: true,
										gridOpacity: 0.1,
										format: '.0%',
										orient: 'right',
										tickCount: 6
									},
									scale: { domain: [0, 1] },
									stack: null
								},
								color: {
									field: 'key',
									type: 'nominal',
									scale: { range: ['#4A44F2', '#797FF2', '#2A2C59'] },
									legend: null
								}
							},
							layer: [
								{
									mark: {
										type: 'area',
										line: true,
										gradient: 'linear',
										stops: [
											{ offset: 0, color: '#A7793E' },
											{ offset: 0, color: 'purple' }
										]
									}
								},
								{ mark: 'point', transform: [{ filter: { param: 'hover', empty: false } }] }
							]
						},
						{
							mark: 'rule',
							transform: [{ pivot: 'key', value: 'value', groupby: ['time'] }],
							encoding: {
								stroke: { value: '#FFFFFF' },
								strokeOpacity: { value: 0.2 },
								strokeWidth: { value: 2 },
								opacity: {
									value: 0,
									condition: { value: 1, param: 'hover', empty: false }
								},
								tooltip: [
									{
										field: 'cpuUsagePercent',
										type: 'quantitative',
										format: '.0%',
										title: 'CPU Usage'
									},
									{
										field: 'memUsagePercent',
										type: 'quantitative',
										format: '.0%',
										title: 'Memory Usage'
									},
									{
										field: 'storageUsagePercent',
										type: 'quantitative',
										format: '.0%',
										title: 'Storage Usage'
									}
								]
							},
							params: [
								{
									name: 'hover',
									select: {
										type: 'point',
										fields: ['time'],
										nearest: true,
										on: 'pointerover',
										clear: 'pointerout'
									}
								}
							]
						}
					]
				};
				vegaEmbed('#cpuAndMemoryUsageChart', chartConfig, { actions: false })
					.then((chartInstance) => {
						setInterval(() => {
							this.updateResourceUsageCharts(chartInstance.view);
						}, parseInt(this.refreshIntervalSecs) * 1000);
					});
			}
		}));

		Alpine.data('services', () => ({
			// Primary States
			service: {},
			resetPrimaryStates() {
				this.service = {
					name: '',
					version: '',
					envs: [],
					portBindings: [],
					startupFile: '',
					autoStart: '',
					timeoutStartSecs: '',
					autoRestart: '',
					maxStartRetries: '',
					autoCreateMapping: '',
					startCmd: '',
					avatarUrl: '',
					execUser: '',
					workingDirectory: '',
					logOutputPath: '',
					logErrorPath: '',
				};
			},
			init() {
				this.resetPrimaryStates();
			},

			// Auxiliary States
			installedServicesFilters: {
				name: '',
				nature: '',
				type: '',
				status: '',
			},
			installedServicesPagination: {
				pageNumber: installedServicesCurrentPageNumber,
				itemsPerPage: 5,
			},
			reloadInstalledServicesTable() {
				queryParams = new URLSearchParams();
				queryParams.set('installedServicesPageNumber', this.installedServicesPagination.pageNumber);
				queryParams.set('installedServicesItemsPerPage', this.installedServicesPagination.itemsPerPage);

				for (let [filterKey, filterValue] of Object.entries(this.installedServicesFilters)) {
					filterValue = filterValue.trim();
					if (filterValue === '') {
						continue;
					}
					const filterKeyCapitalized = filterKey.charAt(0).toUpperCase() + filterKey.slice(1);
					queryParams.set('installedServices'+filterKeyCapitalized, filterValue);
				}

				htmx.ajax(
					'GET', '/overview/?' + queryParams.toString(),
					{
						select: '#installed-services-table',
						target: '#installed-services-table',
						indicator: '#loading-overlay',
						swap: 'outerHTML transition:true'
					},
				);
			},
			targetServiceType: 'installables',
			selectedInstallableServiceType: 'runtime',
			selectedInstallableServiceName: '',
			selectedInstallableServiceAvailableVersions: [],
			updateSelectedInstallableService(installableServiceName) {
				this.selectedInstallableServiceName = installableServiceName;

				const installableService = JSON.parse(
					document.getElementById('installableServiceEntity_'+installableServiceName).textContent
				);

				this.service.name = installableServiceName;
				this.service.version = installableService.versions[0];
				this.service.envs = installableService.envs;
				this.service.portBindings = installableService.portBindings;

				this.selectedInstallableServiceAvailableVersions = installableService.versions;
			},
			updateServiceStatus(name, status) {
				return htmx.ajax(
					'PUT', '/api/v1/services/',
					{
						swap: 'none',
						values: { name: name, status: status }
					},
				);
			},
			resetAuxiliaryStates() {
				this.installedServicesFilters = {
					name: '',
					nature: '',
					type: '',
					status: '',
				};
				this.installedServicesPagination = {
					pageNumber: installedServicesCurrentPageNumber,
					itemsPerPage: 5,
				};
				this.targetServiceType = 'installables';
				this.selectedInstallableServiceType = 'runtime';
				this.selectedInstallableServiceName = '';
				this.selectedInstallableServiceAvailableVersions = [];
			},

			// Modal States
			isServiceInstallationModalOpen: false,
			openServiceInstallationModal() {
				this.resetPrimaryStates();
				this.resetAuxiliaryStates();

				this.isServiceInstallationModalOpen = true;
			},
			closeServiceInstallationModal() {
				this.isServiceInstallationModalOpen = false;
			},
			installService() {
				const serviceInstallationParamsWithoutEmptyValues = {};
				for (const paramName of Object.keys(this.service)) {
					const installationParam = this.service[paramName];
					if (installationParam === null) {
						continue
					}

					if (installationParam.length === 0) {
						continue
					}

					serviceInstallationParamsWithoutEmptyValues[paramName] = installationParam;
				}

				this.closeServiceInstallationModal();

				Infinite.JsonAjax(
					'POST', '/api/v1/services/' + this.targetServiceType + '/',
					serviceInstallationParamsWithoutEmptyValues,
				)
					.then(() => {
						if (this.targetServiceType == "custom") {
							return this.$dispatch('install:custom-service');
						}

						this.$store.main.refreshScheduledTasksPopover();
					})
					.catch((error) => throw new Error('InstallServiceError: ' + error.message));
			},
			isUpdateInstalledServiceModalOpen: false,
			parseInstalledServiceEnvs(installedServiceEnvs) {
				const serviceEnvs = []
				for (const serviceEnv of installedServiceEnvs) {
					const serviceEnvParts = serviceEnv.split('=');
					if (serviceEnvParts.length !== 2) {
						continue
					}

					serviceEnvs.push({
						key: serviceEnvParts[0],
						value: serviceEnvParts[1],
					});
				}
				return serviceEnvs
			},
			openUpdateInstalledServiceModal(installedServiceName) {
				this.resetPrimaryStates();
				this.resetAuxiliaryStates();

				const installedServiceEntity = JSON.parse(
					document.getElementById('installedServiceEntity_'+installedServiceName).textContent
				);
				this.service = Object.assign({}, installedServiceEntity);

				this.service.envs = this.parseInstalledServiceEnvs(installedServiceEntity.envs);

				if (this.service.nature !== 'custom') {
					if (this.service.nature === 'multi') {
						installedServiceName = installedServiceName.split('_')[0];
					}

					const installableServiceEntity = JSON.parse(
						document.getElementById('installableServiceEntity_'+installedServiceName).textContent
					);
					this.selectedInstallableServiceAvailableVersions = installableServiceEntity.versions;
				}

				this.isUpdateInstalledServiceModalOpen = true;
			},
			closeUpdateInstalledServiceModal() {
				this.isUpdateInstalledServiceModalOpen = false;
			},
			async updateService() {
				const serviceParamsToUpdateWithoutEmptyValues = {};
				for (const paramName of Object.keys(this.service)) {
					if (paramName === 'status') {
						continue
					}

					const serviceParamToUpdate = this.service[paramName];
					if (serviceParamToUpdate === null) {
						continue
					}

					if (serviceParamToUpdate.length === 0) {
						continue
					}

					serviceParamsToUpdateWithoutEmptyValues[paramName] = serviceParamToUpdate;
				}

				this.closeUpdateInstalledServiceModal();

				Infinite.JsonAjax(
					'PUT', '/api/v1/services/',
					serviceParamsToUpdateWithoutEmptyValues,
				)
					.then(() => this.$dispatch('update:service'))
					.catch((error) => throw new Error('UpdateServiceError: ' + error.message));
			},
			isUninstallServiceModalOpen: false,
			openUninstallServiceModal(name) {
				this.resetPrimaryStates();

				this.service.name = name
				this.isUninstallServiceModalOpen = true;
			},
			closeUninstallServiceModal() {
				this.isUninstallServiceModalOpen = false;
			},
			uninstallService() {
				htmx.ajax(
					'DELETE',
					'/api/v1/services/' + this.service.name + '/',
					{swap: 'none'},
				).then(() => this.$dispatch('delete:service'));

				this.closeUninstallServiceModal();
			},
		}));
	})
}

templ OverviewIndex(
	vhostsHostnames []string,
	marketplaceOverview MarketplaceOverview,
	o11yOverview entity.O11yOverview,
	servicesOverview ServicesOverview,
) {
	@OverviewIndexLocalState(
		int(servicesOverview.InstalledServicesResponseDto.Pagination.PageNumber),
	)
	<div class="flex flex-col">
		<div class="mb-6 flex flex-row items-center justify-between">
			@componentStructural.PageTitle(
				"Overview",
				"Welcome! Take a quick peek at your installed services and marketplace items, as well as OS performance such as the server resource usage and system information.",
				"ph-speedometer",
			)
		</div>
		<div class="space-y-5">
			<div id="marketplace" class="card w-full" x-data="marketplace">
				@InstalledMarketplaceItemsTable(marketplaceOverview.InstalledItemsList)
				@componentStructural.ScheduleDeletionModal(
					"isUninstallMarketplaceItemModalOpen",
					"closeUninstallMarketplaceItemModal()",
					"uninstallMarketplaceItem()", "marketplaceItem.name",
					"marketplaceItem.id",
				)
				@ScheduleMarketplaceItemInstallationModal(
					vhostsHostnames, marketplaceOverview.CatalogItemsList,
				)
			</div>
			<div id="system-info" class="card w-full" x-data="resourceUsage">
				@SystemInfoTableAndGraphic(o11yOverview)
			</div>
			<div id="services" class="card w-full" x-data="services">
				@InstalledServicesItemsTable(servicesOverview.InstalledServicesResponseDto)
				@ServiceInstallationModal(servicesOverview.InstallableServices)
				@UpdateInstalledServiceModal()
				@componentStructural.DeleteModal(
					"isUninstallServiceModalOpen", "closeUninstallServiceModal()",
					"uninstallService()", "service.name", "",
				)
			</div>
		</div>
	</div>
}

templ InstalledMarketplaceItemsTable(installedItemsList []entity.MarketplaceInstalledItem) {
	<div class="bg-os-800 p-5">
		<div class="mb-2">
			@componentStructural.PageSubHeading("Marketplace", "", "ph-storefront")
		</div>
		<table class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out">
			<thead class="bg-os-500 text-xs uppercase text-neutral-400">
				<tr class="border-b border-neutral-500 border-opacity-90 text-center">
					<th scope="col" class="w-[20%] px-5 py-3 text-left">Name</th>
					<th scope="col" class="w-[15%] px-5 py-3">Type/Installation Path</th>
					<th scope="col" class="w-[20%] px-5 py-3">Installation Directory</th>
					<th scope="col" class="w-[15%] px-5 py-3">Created At</th>
					<th scope="col" class="flex justify-end py-3">
						<div class="mr-2">
							@componentForm.SubmitButton(
								"", "Install catalog item", "ph-arrow-line-down",
								"openMarketplaceItemInstallationModal()", false,
							)
						</div>
					</th>
				</tr>
			</thead>
			<tbody>
				for _, installedItem := range installedItemsList {
					<tr class="odd:bg-os-500 even:bg-os-700 border-b border-neutral-500 border-opacity-30 text-center">
						<th scope="row" class="px-5 py-3 text-left font-normal">
							<div class="inline-flex items-center">
								<img class="mr-2 h-10 w-10 rounded-full" src={ installedItem.AvatarUrl.String() }/>
								{ installedItem.Name.String() }
							</div>
						</th>
						<th scope="row" class="px-5 py-3 font-normal">
							<div class="flex items-center justify-center">
								@componentStructural.Tag(
									"", installedItem.Type.String(),
									installedItem.Hostname.String()+installedItem.UrlPath.String(),
									"infinite-500",
								)
							</div>
						</th>
						<th scope="row" class="px-5 py-3 font-normal">{ installedItem.InstallDirectory.String() }</th>
						<th scope="row" class="px-5 py-3 font-normal">{ installedItem.CreatedAt.ReadDateOnly() }</th>
						<th scope="row" class="px-5 py-3 text-right font-normal">
							<div class="inline-flex">
								@componentStructural.CircularIconButtonWithTooltip(
									"ph-trash", "red-800", "red-600",
									"openUninstallMarketplaceItemModal("+installedItem.Id.String()+", '"+installedItem.Name.String()+"')",
									"Uninstall", "red-500",
								)
							</div>
						</th>
					</tr>
				}
				if len(installedItemsList) == 0 {
					<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20">
						<td class="px-3 py-4 text-center italic text-slate-500" colspan="12">No marketplace items installed yet.</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ MarketplaceCatalogItemsCarousel(catalogItemEntity entity.MarketplaceCatalogItem) {
	<div class="flex grid justify-center gap-x-14">
		<!-- MarketplaceCatalogItemsCarousel JavaScript -->
		@templ.JSONScript("marketplaceCatalogItem_"+catalogItemEntity.Id.String(), catalogItemEntity)
		<!-- MarketplaceCatalogItemsCarousel HTML -->
		<div
			@click={ "updateSelectedMarketplaceItem(" + catalogItemEntity.Id.String() + ")" }
			class="bg-os-500 hover:ring-infinite-500 hover:text-infinite-500 group relative flex cursor-pointer flex-col items-center justify-center rounded-md p-2 transition-all duration-300 hover:ring-1"
			:class={ "{'text-infinite-500 ring-1 ring-infinite-500': selectedMarketplaceItemId === " + catalogItemEntity.Id.String() + "}" }
		>
			<img
				src={ catalogItemEntity.AvatarUrl.String() }
				alt={ catalogItemEntity.Name.String() + " Avatar" }
				class="max-w-18 m-auto rounded-md transition-all duration-300 group-hover:sepia"
				:class={ "{'sepia': selectedMarketplaceItemId === " + catalogItemEntity.Id.String() + "}" }
			/>
			<div class="text-wrap mt-1 break-words text-center text-xs">
				{ catalogItemEntity.Name.String() }
			</div>
			<div class="bg-os-600 min-w-100 absolute left-1/2 top-full z-10 mt-1 hidden -translate-x-1/2 transform rounded-md p-3 text-xs text-neutral-50 shadow-lg transition-all duration-500 group-hover:block group-hover:translate-y-0.5">
				<div class="flex flex-row items-center gap-3">
					<div class="basis-3/4 text-xs">
						{ catalogItemEntity.Description.String() }
					</div>
					<div class="basis-1/4 space-y-1.5">
						@componentStructural.TinyTag(componentStructural.TinyTagDto{
							HighlightedIcon: "ph-memory",
							TagValue:        catalogItemEntity.ManifestVersion.String(),
							TagColor:        "infinite-500",
						})
						@componentStructural.TinyTag(componentStructural.TinyTagDto{
							HighlightedIcon: "ph-hard-drives",
							TagValue:        catalogItemEntity.EstimatedSizeBytes.StringWithSuffix(),
							TagColor:        "infinite-500",
						})
					</div>
				</div>
			</div>
		</div>
	</div>
}

func transformMarketplaceCatalogItemsIntoCarouselItems(
	catalogItems []entity.MarketplaceCatalogItem,
) []templ.Component {
	carouselItems := []templ.Component{}
	for _, itemEntity := range catalogItems {
		carouselItem := MarketplaceCatalogItemsCarousel(itemEntity)
		carouselItems = append(carouselItems, carouselItem)
	}

	return carouselItems
}

templ ScheduleMarketplaceItemInstallationForm(
	vhostsHostnames []string,
	marketplaceCatalogItems CatalogItemsGroupedByType,
) {
	<!-- ScheduleMarketplaceItemInstallationForm -->
	<form
		id="schedule-marketplace-item-installation-form"
		hx-post="/api/v1/marketplace/catalog/"
		hx-indicator="#loading-overlay"
		hx-swap="none"
		@submit="$store.main.refreshScheduledTasksPopover()"
	>
		<input type="hidden" name="id" :value="marketplaceItem.id"/>
		<input type="hidden" name="dataFields" :value="dataFieldsAsString"/>
		<div class="my-6 space-y-2">
			<div class="w-100% inline-flex space-x-2">
				<div class="w-60%">
					@componentForm.SelectInput(
						"hostname", "Hostname", "marketplaceItem.hostname",
						"", vhostsHostnames, true,
					)
				</div>
				<div class="w-40%">
					@componentForm.InputFieldWithPrefix(componentForm.InputFieldWithPrefixDto{
						Type:                "text",
						Id:                  "urlPath",
						Label:               "URL Path",
						BindInputValuePath:  "marketplaceItem.urlPath",
						BindPrefixValuePath: "hostnameWithTrailingSlash",
						InfoTooltipContent:  "Path where the respective installed item will be available for access.",
					})
				</div>
			</div>
			<div class="bg-os-500 flex flex-col gap-4 rounded-md p-3">
				<div class="flex justify-stretch gap-4">
					<div>
						@componentStructural.VerticalTabHeader(
							[]componentStructural.TabHeaderItem{
								{Label: "Apps", Value: "apps"},
								{Label: "Frameworks", Value: "frameworks"},
								{Label: "Stacks", Value: "stacks"},
							}, "selectedMarketplaceItemType",
						)
					</div>
					<!-- MarketplaceVerticalTabContent -->
					<div class="bg-os-400 flex w-full justify-center rounded-lg px-5 py-2.5">
						<div x-show="selectedMarketplaceItemType === 'apps'">
							@componentMisc.MultiItemCarousel(
								"marketplaceAppItemsCarousel",
								transformMarketplaceCatalogItemsIntoCarouselItems(marketplaceCatalogItems.Apps),
								4,
							)
						</div>
						<div x-show="selectedMarketplaceItemType === 'frameworks'">
							@componentMisc.MultiItemCarousel(
								"marketplaceFrameworksItemsCarousel",
								transformMarketplaceCatalogItemsIntoCarouselItems(marketplaceCatalogItems.Frameworks),
								4,
							)
						</div>
						<div x-show="selectedMarketplaceItemType === 'stacks'">
							@componentMisc.MultiItemCarousel(
								"marketplaceStacksItemsCarousel",
								transformMarketplaceCatalogItemsIntoCarouselItems(marketplaceCatalogItems.Stacks),
								4,
							)
						</div>
					</div>
				</div>
			</div>
			<template x-if="marketplaceItem.dataFields.length > 0">
				@componentStructural.CollapsibleSection("Install Parameters", "ph-brackets-curly", true) {
					@componentStructural.Alert(
						componentStructural.AlertTypeWarning,
						"All fields without pre-filled values must be completed as they are required. Otherwise, the installation will fail!",
					)
					<div class="mt-6 grid grid-cols-2 gap-4">
						<template x-for="dataField in marketplaceItem.dataFields">
							<div>
								<template x-if="dataField.type === 'text' || dataField.type === 'email'">
									@componentForm.InputFieldClientSide(
										"dataField.type", "dataField.label", "dataField.value",
									)
								</template>
								<template x-if="dataField.type === 'password'">
									@componentForm.PasswordInputClientSide(
										"dataField.label", "dataField.value", true,
									)
								</template>
								<template x-if="dataField.type === 'select'">
									@componentForm.SelectInputClientSide(componentForm.SelectInputClientSideDto{
										BindLabel:     "dataField.label",
										BindModelPath: "dataField.value",
										BindOptions:   "dataField.options",
									})
								</template>
							</div>
						</template>
					</div>
				}
			</template>
		</div>
		@componentForm.SubmitButton(
			"install-marketplace-item-button", "Schedule installation",
			"ph-queue", "closeMarketplaceItemInstallationModal()", false,
		)
	</form>
}

templ ScheduleMarketplaceItemInstallationModal(
	vhostsHostnames []string,
	marketplaceCatalogItems CatalogItemsGroupedByType,
) {
	@componentStructural.RegularModal(
		"Install marketplace item", "isMarketplaceItemInstallationModalOpen",
		"closeMarketplaceItemInstallationModal()", "",
	) {
		@ScheduleMarketplaceItemInstallationForm(
			vhostsHostnames, marketplaceCatalogItems,
		)
	}
}

func transformUptimeSecsIntoHumanReadable(uptimeSecs uint64) string {
	uptimeHours := uptimeSecs / 3600
	uptimeMinutes := (uptimeSecs % 3600) / 60
	uptimeSeconds := uptimeSecs % 60

	return fmt.Sprintf("%dh %dm %ds", uptimeHours, uptimeMinutes, uptimeSeconds)
}

func transformCpuInfoIntoHumanReadable(cpuCores float64, cpuFrequency float64) string {
	cpuFrequency = math.Round(cpuFrequency/1000*10) / 10
	return fmt.Sprintf("%.0f CPU @ %.1f GHz", cpuCores, cpuFrequency)
}

templ SystemInfoTableAndGraphic(o11yOverview entity.O11yOverview) {
	<!-- SystemInfoTableAndGraphic -->
	<div class="bg-os-800 mb-4 rounded-md p-5">
		<div class="mb-2">
			@componentStructural.PageSubHeading("System Information", "", "ph-chart-line")
		</div>
		<div class="flex space-x-3">
			<!-- Observability Table -->
			<div class="bg-os-500 max-[35%] min-h-56 min-w-[35%] space-y-2 rounded p-3">
				<div class="bg-os-800 grid grid-flow-col grid-cols-2 rounded p-3">
					<span>Hostname</span>
					<span class="text-right">{ o11yOverview.Hostname.String() }</span>
				</div>
				<div class="bg-os-800 grid grid-flow-col grid-cols-2 rounded p-3">
					<span>Uptime</span>
					<span class="text-right">{ transformUptimeSecsIntoHumanReadable(o11yOverview.UptimeSecs) }</span>
				</div>
				<div class="bg-os-800 grid grid-flow-col grid-cols-2 rounded p-3">
					<span>Hardware Specs</span>
					<div class="space-y-2">
						<div class="flex justify-end">
							@componentStructural.TinyTag(componentStructural.TinyTagDto{
								HighlightedIcon: "ph-cpu",
								TagValue:        transformCpuInfoIntoHumanReadable(o11yOverview.HardwareSpecs.CpuCores, o11yOverview.HardwareSpecs.CpuFrequency),
								TagColor:        "infinite-500",
							})
						</div>
						<div class="flex justify-end">
							@componentStructural.TinyTag(componentStructural.TinyTagDto{
								HighlightedIcon: "ph-memory",
								TagValue:        o11yOverview.HardwareSpecs.MemoryTotal.StringWithSuffix() + " RAM",
								TagColor:        "infinite-500",
							})
						</div>
						<div class="flex justify-end">
							@componentStructural.TinyTag(componentStructural.TinyTagDto{
								HighlightedIcon: "ph-sim-card",
								TagValue:        o11yOverview.HardwareSpecs.StorageTotal.StringWithSuffix() + " Storage",
								TagColor:        "infinite-500",
							})
						</div>
					</div>
				</div>
				<div class="bg-os-800 grid grid-flow-col grid-cols-2 rounded p-3">
					<span>Public IP Address</span>
					<span class="text-right">{ o11yOverview.PublicIpAddress.String() }</span>
				</div>
			</div>
			<!-- Resource Usage Graphic -->
			<div class="bg-os-500 w-full rounded py-3">
				<div class="flex cursor-default flex-row items-center justify-center gap-2 text-[11px] text-neutral-300">
					<div class="flex flex-row items-center gap-1">
						<span class="h-4 w-4 rounded-full border-2 border-[#4A44F2] bg-[#2C2891]"></span>
						CPU Usage (%)
					</div>
					<div class="flex flex-row items-center gap-1">
						<span class="h-4 w-4 rounded-full border-2 border-[#797FF2] bg-[#484C91]"></span>
						Memory Usage (%)
					</div>
					<div class="flex flex-row items-center gap-1">
						<span class="h-4 w-4 rounded-full border-2 border-[#353A8C] bg-[#212347]"></span>
						Storage Usage (%)
					</div>
				</div>
				<div class="flex h-full w-full justify-center">
					<div id="cpuAndMemoryUsageChart" class="h-[90%] w-[95%]"></div>
				</div>
			</div>
		</div>
	</div>
}

templ InstalledServicesItemsTable(
	installedServicesResponseDto dto.ReadInstalledServicesItemsResponse,
) {
	<!-- InstalledServicesItemsTable -->
	<div class="bg-os-800 p-5">
		<div class="mb-2">
			@componentStructural.PageSubHeading("Services", "", "ph-package")
		</div>
		<div
			id="installed-services-table"
			hx-get="/overview/"
			hx-trigger="install:custom-service from:window delay:250ms, update:service from:window delay:250ms, delete:service from:window delay:250ms"
			hx-select="#installed-services-table"
			hx-target="#installed-services-table"
			hx-swap="outerHTML transition:true"
			@update:installed-services-pagination="reloadInstalledServicesTable()"
			@update:installed-services-record-filters="reloadInstalledServicesTable()"
		>
			<div class="bg-os-800 border-b border-neutral-500 border-opacity-90 p-2">
				@componentStructural.RecordFilters("installed-services", "installedServicesFilters")
			</div>
			<table class="w-full table-auto border-collapse rounded-md transition-all duration-300 ease-in-out">
				<thead class="bg-os-500 text-xs uppercase text-neutral-400">
					<tr class="border-b border-neutral-500 border-opacity-90 text-center">
						<th scope="col" class="px5 w-[25%] py-3 text-left">Service</th>
						<th scope="col" class="px5 w-[10%] py-3">Status</th>
						<th scope="col" class="px5 w-[10%] py-3">CPU</th>
						<th scope="col" class="px5 w-[10%] py-3">RAM</th>
						<th scope="col" class="px5 w-[25%] py-3">Port Bindings</th>
						<th scope="col" class="flex justify-end py-3">
							<div class="mr-2">
								@componentForm.SubmitButton(
									"", "Install service", "ph-arrow-line-down",
									"openServiceInstallationModal()", false,
								)
							</div>
						</th>
					</tr>
				</thead>
				<tbody>
					for _, installedServiceEntity := range installedServicesResponseDto.InstalledServicesWithMetrics {
						<tr class="odd:bg-os-500 even:bg-os-700 border-b border-neutral-500 border-opacity-30 text-center">
							<td class="hidden">
								@templ.JSONScript("installedServiceEntity_"+installedServiceEntity.Name.String(), installedServiceEntity)
							</td>
							<td class="overflow-x-hidden px-3 py-2 text-left">
								<div class="grid grid-rows-2 gap-1">
									<div class="inline-flex items-center">
										<img
											class="mr-2 h-10 w-10 rounded-full"
											if installedServiceEntity.AvatarUrl != nil {
												src={ installedServiceEntity.AvatarUrl.String() }
											} else {
												src="/assets/default-avatar.jpg"
											}
										/>
										{ installedServiceEntity.Name.String() }
									</div>
									<div class="mt-1 flex flex-wrap items-center justify-normal gap-2">
										@componentStructural.TagWithFilter(componentStructural.TagWithFilterDto{
											HighlightedLabel: "type",
											TagValue:         installedServiceEntity.Type.String(),
											TagColor:         "infinite-500",
											FilterValue:      installedServiceEntity.Type.String(),
											FilterBindPath:   "installedServicesFilters['type']",
										})
										@componentStructural.Tag(
											"", "version", installedServiceEntity.Version.String(),
											"infinite-500",
										)
										@componentStructural.TagWithFilter(componentStructural.TagWithFilterDto{
											HighlightedLabel: "nature",
											TagValue:         installedServiceEntity.Nature.String(),
											TagColor:         "infinite-500",
											FilterValue:      installedServiceEntity.Nature.String(),
											FilterBindPath:   "installedServicesFilters['nature']",
										})
									</div>
								</div>
							</td>
							<td class="overflow-x-hidden px-3 py-2">
								{ installedServiceEntity.Status.String() }
							</td>
							<td class="overflow-x-hidden px-3 py-2">
								if installedServiceEntity.Metrics != nil {
									@componentMisc.ProgressBar(
										uint8(installedServiceEntity.Metrics.CpuUsagePercent),
										fmt.Sprintf("%.2f", installedServiceEntity.Metrics.CpuUsagePercent)+"%",
									)
								} else {
									<span class="text-center text-slate-500">--</span>
								}
							</td>
							<td class="overflow-x-hidden px-3 py-2">
								if installedServiceEntity.Metrics != nil {
									@componentMisc.ProgressBar(
										uint8(installedServiceEntity.Metrics.MemUsagePercent),
										fmt.Sprintf("%.2f", installedServiceEntity.Metrics.MemUsagePercent)+"%",
									)
								} else {
									<span class="text-center text-slate-500">--</span>
								}
							</td>
							<td class="overflow-x-hidden px-3 py-2">
								if installedServiceEntity.PortBindings != nil && len(installedServiceEntity.PortBindings) > 0 {
									@componentStructural.PortBindingsTable(installedServiceEntity.PortBindings)
								} else {
									<span class="text-center text-slate-500">--</span>
								}
							</td>
							<td class="px-3 py-2">
								<div class="flex justify-end space-x-2">
									@componentStructural.CircularIconButtonWithTooltip(
										"ph-arrow-clockwise", "os-200", "os-300",
										"updateServiceStatus('"+installedServiceEntity.Name.String()+"', 'restart')",
										"Restart", "os-200",
									)
									if installedServiceEntity.Type.String() != "system" {
										switch installedServiceEntity.Status.String() {
											case "running":
												@componentStructural.CircularIconButtonWithTooltip(
													"ph-pause", "os-200", "os-300",
													"updateServiceStatus('"+installedServiceEntity.Name.String()+"', 'pause')",
													"Pause", "os-200",
												)
											case "stopped":
												@componentStructural.CircularIconButtonWithTooltip(
													"ph-play", "os-200", "os-300",
													"updateServiceStatus('"+installedServiceEntity.Name.String()+"', 'start')",
													"Start", "os-200",
												)
										}
										if installedServiceEntity.Nature.String() != "solo" {
											@componentStructural.CircularIconButtonWithTooltip(
												"ph-gear", "os-200", "os-300",
												"openUpdateInstalledServiceModal('"+installedServiceEntity.Name.String()+"')",
												"Edit", "os-200",
											)
										}
										@componentStructural.CircularIconButtonWithTooltip(
											"ph-trash", "red-800", "red-600",
											"openUninstallServiceModal('"+installedServiceEntity.Name.String()+"')",
											"Uninstall", "red-500",
										)
									}
								</div>
							</td>
						</tr>
					}
					if len(installedServicesResponseDto.InstalledServicesWithMetrics) == 0 {
						<tr class="border-b border-neutral-500 border-opacity-30 bg-neutral-950 bg-opacity-20 text-center">
							<td class="px-3 py-4 text-center italic text-slate-500" colspan="12">No services installed yet.</td>
						</tr>
					}
				</tbody>
			</table>
			<div class="bg-os-800 border-t border-neutral-500 border-opacity-90 p-3">
				@componentStructural.Pagination(
					"installed-services", installedServicesResponseDto.Pagination,
					"installedServicesPagination.pageNumber", "installedServicesPagination.itemsPerPage",
				)
			</div>
		</div>
	</div>
}

templ InstallableServiceItemsCarousel(installableServiceEntity entity.InstallableService) {
	<div class="flex grid justify-center gap-x-14">
		<!-- InstallableServicesCarousel JavaScript -->
		@templ.JSONScript("installableServiceEntity_"+installableServiceEntity.Name.String(), installableServiceEntity)
		<!-- InstallableServicesCarousel HTML -->
		<div
			@click={ "updateSelectedInstallableService('" + installableServiceEntity.Name.String() + "')" }
			class="bg-os-500 hover:ring-infinite-500 hover:text-infinite-500 group relative flex cursor-pointer flex-col items-center justify-center rounded-md p-2 transition-all duration-300 hover:ring-1"
			:class={ "{'text-infinite-500 ring-1 ring-infinite-500': selectedInstallableServiceName === '" + installableServiceEntity.Name.String() + "'}" }
		>
			<img
				src={ installableServiceEntity.AvatarUrl.String() }
				alt={ installableServiceEntity.Name.String() + " Avatar" }
				class="max-w-18 m-auto rounded-md transition-all duration-300 group-hover:sepia"
				:class={ "{'sepia': selectedInstallableServiceName === '" + installableServiceEntity.Name.String() + "'}" }
			/>
			<div class="text-wrap mt-1 break-words text-center text-xs">
				{ installableServiceEntity.Name.String() }
			</div>
			<div class="bg-os-600 min-w-100 absolute left-1/2 top-full z-10 mt-1 hidden -translate-x-1/2 transform rounded-md p-3 text-xs text-neutral-50 shadow-lg transition-all duration-500 group-hover:block group-hover:translate-y-0.5">
				<div class="flex flex-row items-center gap-3">
					<div class="basis-3/4 text-xs">
						{ installableServiceEntity.Description.String() }
					</div>
					<div class="basis-1/4 space-y-1.5">
						@componentStructural.TinyTag(componentStructural.TinyTagDto{
							HighlightedIcon: "ph-memory",
							TagValue:        installableServiceEntity.EstimatedSizeBytes.StringWithSuffix(),
							TagColor:        "infinite-500",
						})
					</div>
				</div>
			</div>
		</div>
	</div>
}

func transformInstallableServicesIntoCarouselItems(
	installableServices []entity.InstallableService,
) []templ.Component {
	carouselItems := []templ.Component{}
	for _, itemEntity := range installableServices {
		carouselItem := InstallableServiceItemsCarousel(itemEntity)
		carouselItems = append(carouselItems, carouselItem)
	}

	return carouselItems
}

templ InstallableServiceForm(
	submitButtonId, submitButtonText, submitButtonIcon, submitButtonOnClick string,
	installableServices *InstallableServicesGroupedByType,
) {
	<!-- InstallableServiceForm -->
	if installableServices != nil {
		<div class="bg-os-500 flex flex-col gap-4 rounded-md p-3">
			<div class="flex justify-center gap-4">
				for _, serviceType := range valueObject.ValidServiceTypes {
					if serviceType != "system" {
						@componentForm.RadioInput(
							"targetType", serviceType, serviceType,
							"selectedInstallableServiceType",
						)
					}
				}
			</div>
			<!-- InstallableServicesCarousel -->
			<div class="bg-os-400 flex w-full justify-center rounded-lg p-4">
				<div x-show="selectedInstallableServiceType === 'runtime'">
					@componentMisc.MultiItemCarousel(
						"installableRuntimeServicesCarousel",
						transformInstallableServicesIntoCarouselItems(installableServices.Runtime),
						7,
					)
				</div>
				<div x-show="selectedInstallableServiceType === 'database'">
					@componentMisc.MultiItemCarousel(
						"installableDatabaseServicesCarousel",
						transformInstallableServicesIntoCarouselItems(installableServices.Database),
						7,
					)
				</div>
				<div x-show="selectedInstallableServiceType === 'webserver'">
					@componentMisc.MultiItemCarousel(
						"installableWebserverServicesCarousel",
						transformInstallableServicesIntoCarouselItems(installableServices.Webserver),
						7,
					)
				</div>
				<div x-show="selectedInstallableServiceType === 'other'">
					@componentMisc.MultiItemCarousel(
						"installableOtherServicesCarousel",
						transformInstallableServicesIntoCarouselItems(installableServices.Other),
						7,
					)
				</div>
			</div>
			@componentForm.SelectInputClientSide(componentForm.SelectInputClientSideDto{
				BindLabel:     "'Version'",
				BindModelPath: "service.version",
				BindOptions:   "selectedInstallableServiceAvailableVersions",
			})
		</div>
	}
	<div class="my-4">
		@componentStructural.CollapsibleSection("Advanced Settings", "ph-gear", false) {
			<div class="flex w-full flex-col gap-4">
				<template
					x-if={ strconv.FormatBool(installableServices == nil) + " || selectedInstallableServiceName !== ''" }
				>
					<div class="mt-4 grid grid-rows-2 gap-2">
						<div class="grid grid-cols-2 gap-2">
							@componentForm.InputField(componentForm.InputFieldDto{
								Type:               "number",
								Label:              "Timeout Start Secs",
								BindModelValuePath: "service.timeoutStartSecs",
							})
							@componentForm.InputField(componentForm.InputFieldDto{
								Type:               "number",
								Label:              "Max Start Retries",
								BindModelValuePath: "service.maxStartRetries",
							})
						</div>
						<div class="grid grid-cols-3 place-items-center gap-2">
							@componentForm.CheckboxInputSwitchToggle("", "Auto Restart", "service.autoRestart", "")
							@componentForm.CheckboxInputSwitchToggle("", "Auto Start", "service.autoStart", "")
							@componentForm.CheckboxInputSwitchToggle("", "Auto Create Mapping", "service.autoCreateMapping", "")
						</div>
					</div>
				</template>
				@componentForm.MultiColumnRepeatableFieldset(
					"envs", "Environment Variables", "", "service.envs",
					[]componentForm.RepeatableField{
						{InputType: "text", Id: "key", Label: "Key"},
						{InputType: "text", Id: "value", Label: "Value"},
					},
				)
				@componentForm.MultiColumnRepeatableFieldset(
					"portBindings", "Port Bindings", "",
					"service.portBindings", []componentForm.RepeatableField{
						{InputType: "text", Id: "publicPort", Label: "Public Port"},
						{
							InputType: "select",
							Id:        "protocol",
							Label:     "Protocol",
							Options:   valueObject.ValidNetworkProtocols,
						},
					},
				)
			</div>
		}
	</div>
	@componentForm.SubmitButton(
		submitButtonId, submitButtonText, submitButtonIcon, submitButtonOnClick, false,
	)
}

templ CustomServiceForm(
	submitButtonId, submitButtonText, submitButtonIcon, submitButtonOnClick string,
) {
	<!-- CustomServiceForm -->
	<div class="grid grid-rows-2 gap-4">
		<div class="grid grid-cols-2 gap-x-2">
			@componentForm.InputField(componentForm.InputFieldDto{
				Type:               "text",
				Label:              "Name",
				BindModelValuePath: "service.name",
			})
			@componentForm.SelectInput(
				"", "Type", "service.type", "", valueObject.ValidServiceTypes,
				true,
			)
		</div>
		<div class="flex justify-center">
			<div class="w-2/3">
				@componentForm.InputField(componentForm.InputFieldDto{
					Type:               "text",
					Label:              "Start Command",
					BindModelValuePath: "service.startCmd",
					InfoTooltipContent: `Example: "/usr/bin/binary". If you need to install multiple packages to run your software, you must use the Terminal (SSH).`,
				})
			</div>
		</div>
	</div>
	<div class="my-4">
		@componentStructural.CollapsibleSection("Advanced Settings", "ph-gear", false) {
			<div class="flex w-full flex-col gap-4">
				@componentForm.InputField(componentForm.InputFieldDto{
					Type:               "text",
					Label:              "Avatar URL",
					BindModelValuePath: "service.avatarUrl",
				})
				<div class="grid grid-cols-3 gap-2">
					@componentForm.InputField(componentForm.InputFieldDto{
						Type:               "text",
						Label:              "Exec User",
						BindModelValuePath: "service.execUser",
						InfoTooltipContent: "Unix user that will be used to execute your service commands.",
					})
					@componentForm.InputField(componentForm.InputFieldDto{
						Type:               "number",
						Label:              "Timeout Start Secs",
						BindModelValuePath: "service.timeoutStartSecs",
					})
					@componentForm.InputField(componentForm.InputFieldDto{
						Type:               "number",
						Label:              "Max Start Retries",
						BindModelValuePath: "service.maxStartRetries",
					})
				</div>
				<div class="grid grid-cols-2 gap-2">
					@componentForm.InputField(componentForm.InputFieldDto{
						Type:               "text",
						Label:              "Log Output Path",
						BindModelValuePath: "service.logOutputPath",
						InfoTooltipContent: "Path to the file that will receive the custom service output logs.",
					})
					@componentForm.InputField(componentForm.InputFieldDto{
						Type:               "text",
						Label:              "Log Error Path",
						BindModelValuePath: "service.logErrorPath",
						InfoTooltipContent: "Path to the file that will receive the custom service error logs.",
					})
				</div>
				<div class="grid grid-cols-3 place-items-center gap-2">
					@componentForm.CheckboxInputSwitchToggle("", "Auto Restart", "service.autoRestart", "")
					@componentForm.CheckboxInputSwitchToggle("", "Auto Start", "service.autoStart", "")
					@componentForm.CheckboxInputSwitchToggle("", "Auto Create Mapping", "service.autoCreateMapping", "")
				</div>
				@componentForm.MultiColumnRepeatableFieldset(
					"envs", "Environment Variables", "", "service.envs",
					[]componentForm.RepeatableField{
						{InputType: "text", Id: "key", Label: "Key"},
						{InputType: "text", Id: "value", Label: "Value"},
					},
				)
				@componentForm.MultiColumnRepeatableFieldset(
					"portBindings", "Port Bindings", "",
					"service.portBindings", []componentForm.RepeatableField{
						{InputType: "text", Id: "publicPort", Label: "Public Port"},
						{
							InputType: "select",
							Id:        "protocol",
							Label:     "Protocol",
							Options:   valueObject.ValidNetworkProtocols,
						},
					},
				)
			</div>
		}
	</div>
	@componentForm.SubmitButton(
		submitButtonId, submitButtonText, submitButtonIcon, submitButtonOnClick, false,
	)
}

templ ServiceInstallationForm(installableServices InstallableServicesGroupedByType) {
	<form @submit.prevent="">
		<div class="-mt-4 mb-4 flex justify-start gap-4">
			@componentForm.RadioInput("", "Installable", "installables", "targetServiceType")
			@componentForm.RadioInput("", "Custom", "custom", "targetServiceType")
		</div>
		<div x-show="targetServiceType === 'installables'">
			@InstallableServiceForm(
				"schedule-service-installation-button", "Schedule installation",
				"ph-queue", "installService()", &installableServices,
			)
		</div>
		<div x-show="targetServiceType === 'custom'">
			@CustomServiceForm(
				"install-service-button", "Install immediately", "ph-arrow-line-down",
				"installService()",
			)
		</div>
	</form>
}

templ ServiceInstallationModal(
	installableServices InstallableServicesGroupedByType,
) {
	@componentStructural.RegularModal(
		"Install service", "isServiceInstallationModalOpen",
		"closeServiceInstallationModal()", "",
	) {
		@ServiceInstallationForm(installableServices)
	}
}

templ UpdateInstalledServiceForm() {
	<form @submit.prevent="">
		<div x-show="service.nature !== 'custom'">
			@InstallableServiceForm(
				"update-installed-service-button", "Update service", "ph-check-fat",
				"updateService()", nil,
			)
		</div>
		<div x-show="service.nature === 'custom'">
			@CustomServiceForm(
				"update-installed-service-button", "Update service", "ph-check-fat",
				"updateService()",
			)
		</div>
	</form>
}

templ UpdateInstalledServiceModal() {
	@componentStructural.RegularModal(
		"Update service", "isUpdateInstalledServiceModalOpen",
		"closeUpdateInstalledServiceModal()", "service.name",
	) {
		@UpdateInstalledServiceForm()
	}
}
