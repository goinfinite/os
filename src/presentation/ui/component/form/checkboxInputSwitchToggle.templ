package componentForm

type CheckboxInputSwitchToggleDto struct {
	Id, Label, BindModelPath, CustomValue, UncheckedValue string
}

// Note: "bindModelPath" may be an array (in which case the "customValue" will be
// pushed into the array) OR "bindModelPath" may be just a boolean state (in which
// case the "customValue" is not necessary and will be ignored).
// If you are using this component within a FormData, use the "uncheckedValue"
// and "id" properties to ensure that your unselected component still has a value.
templ CheckboxInputSwitchToggle(inputDto CheckboxInputSwitchToggleDto) {
	if inputDto.Id != "" {
		<input
			type="hidden"
			name={ inputDto.Id }
			x-model={ inputDto.BindModelPath }
			if inputDto.UncheckedValue != "" {
				value={ inputDto.UncheckedValue }
			}
		/>
	}
	<!-- CheckboxInputSwitchToggle -->
	<label class="inline-flex cursor-pointer items-center">
		<input
			type="checkbox"
			if inputDto.Id != "" && inputDto.UncheckedValue == "" {
				name={ inputDto.Id }
			}
			x-model={ inputDto.BindModelPath }
			if inputDto.CustomValue != "" {
				value={ inputDto.CustomValue }
			}
			class="peer sr-only"
		/>
		<div class="peer-checked:bg-infinite-500 bg-os-100 peer relative h-6 w-11 rounded-full after:absolute after:start-[2px] after:top-0.5 after:h-5 after:w-5 after:rounded-full after:border after:bg-white after:transition-all after:content-[''] peer-checked:after:translate-x-full peer-checked:after:border-white"></div>
		<span class="ml-2 text-sm text-neutral-100">{ inputDto.Label }</span>
	</label>
}
