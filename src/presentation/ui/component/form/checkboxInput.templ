package componentForm

type CheckboxInputDto struct {
	Id, DeselectedColor, SelectedColor, OnChange, CustomValue string
}

templ CheckboxInput(inputDto CheckboxInputDto) {
	<label class="cursor-pointer">
		<input
			if inputDto.Id != "" {
				id={ inputDto.Id }
				name={ inputDto.Id }
			}
			type="checkbox"
			@change={ inputDto.OnChange }
			class="peer sr-only"
			value={ inputDto.CustomValue }
		/>
		<i class={ "ph-bold ph-square text-" + inputDto.DeselectedColor + " peer-checked:hidden" }></i>
		<i class={ "ph-bold ph-check-square text-" + inputDto.SelectedColor + " hidden peer-checked:block" }></i>
	</label>
}

type CheckboxInputSwitchToggleDto struct {
	Id, Label, BindModelPath, CustomValue string
}

// Note: "bindModelPath" may be an array (in which case the "customValue" will be
// pushed into the array) OR "bindModelPath" may be just a boolean state (in which
// case the "customValue" is not necessary and will be ignored).
templ CheckboxInputSwitchToggle(inputDto CheckboxInputSwitchToggleDto) {
	<!-- CheckboxInputSwitchToggle -->
	if inputDto.Id != "" {
		<input
			type="hidden"
			name={ inputDto.Id }
			x-model={ inputDto.BindModelPath }
		/>
	}
	<label class="inline-flex cursor-pointer items-center">
		<input
			type="checkbox"
			x-model={ inputDto.BindModelPath }
			if inputDto.CustomValue != "" {
				value={ inputDto.CustomValue }
			}
			class="peer sr-only"
		/>
		<div class="peer-checked:bg-infinite-500 bg-os-100 peer relative h-6 w-11 rounded-full after:absolute after:start-[2px] after:top-0.5 after:h-5 after:w-5 after:rounded-full after:border after:bg-white after:transition-all after:content-[''] peer-checked:after:translate-x-full peer-checked:after:border-white"></div>
		<span class="ml-2 text-sm text-neutral-100">{ inputDto.Label }</span>
	</label>
}
