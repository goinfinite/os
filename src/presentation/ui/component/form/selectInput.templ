package componentForm

templ SelectInput(
	id, label, bindModelPath, onSelect string,
	options []string,
	shouldIncludeBlankOption bool,
) {
	<!-- SelectInput -->
	<div class="relative w-full">
		<select
			if id != "" {
				name={ id }
			}
			x-model={ bindModelPath }
			x-on:change={ onSelect }
			placeholder={ label }
			class="bg-os-300 hover:border-os-100 border-os-200 autofill:bg-os-300 focus:border-os-50 peer relative h-10 w-full appearance-none rounded-md border px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
		>
			if shouldIncludeBlankOption {
				<option class="bg-os-500 checked:bg-infinite-500 bg-opacity-90" value="">--</option>
			}
			for _, option := range options {
				<option
					class="bg-os-500 checked:bg-infinite-500 bg-opacity-90"
					value={ option }
				>
					{ option }
				</option>
			}
		</select>
		if label != "" {
			<label
				for={ id }
				class="from-os-300 via-os-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-55% to-transparent to-55% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
			>
				{ label }
			</label>
		}
		<i class="ph-bold ph-caret-down pointer-events-none absolute right-2.5 top-3.5 text-sm"></i>
	</div>
}

type SelectInputClientSideDto struct {
	BindLabel     string
	BindModelPath string
	BindOptions   string
}

templ SelectInputClientSide(selectInputDto SelectInputClientSideDto) {
	<!-- SelectInput -->
	<div class="relative w-full">
		<select
			x-model={ selectInputDto.BindModelPath }
			class="bg-os-300 hover:border-os-100 border-os-200 autofill:bg-os-300 focus:border-os-50 peer relative h-10 w-full appearance-none rounded-md border px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
		>
			<template x-for={ "option in " + selectInputDto.BindOptions }>
				<option
					:value="option"
					x-text="option"
					:selected={ "option == " + selectInputDto.BindModelPath }
					class="bg-os-500 checked:bg-infinite-500 bg-opacity-90"
				></option>
			</template>
		</select>
		if selectInputDto.BindLabel != "" {
			<label
				x-text={ selectInputDto.BindLabel }
				class="from-os-300 via-os-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-55% to-transparent to-55% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
			></label>
		}
		<i class="ph-bold ph-caret-down pointer-events-none absolute right-2.5 top-3.5 text-sm"></i>
	</div>
}

type SelectLabelValuePair struct {
	Label string
	Value string
}

templ SelectInputWithLabelValuePair(
	id, label, bindModelPath string,
	options []SelectLabelValuePair,
	shouldIncludeBlankOption bool,
) {
	<!-- SelectInputWithLabelValuePair -->
	<div class="relative w-full">
		<select
			if id != "" {
				name={ id }
			}
			if bindModelPath != "" {
				x-model={ bindModelPath }
			}
			if label != "" {
				placeholder={ label }
			}
			class="bg-os-300 hover:border-os-100 border-os-200 autofill:bg-os-300 focus:border-os-50 peer relative h-10 w-full appearance-none rounded-md border px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
		>
			if shouldIncludeBlankOption {
				<option class="bg-os-500 checked:bg-infinite-500 bg-opacity-90">--</option>
			}
			for _, option := range options {
				<option
					class="bg-os-500 checked:bg-infinite-500 bg-opacity-90"
					value={ option.Value }
				>
					{ option.Label }
				</option>
			}
		</select>
		if label != "" {
			<label
				for={ id }
				class="from-os-300 via-os-300 absolute -top-2 left-1.5 z-[1] cursor-text bg-gradient-to-t via-55% to-transparent to-55% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80 transition-all before:absolute before:left-0 before:top-0 before:z-[-1] before:block before:h-full before:w-full before:bg-white before:transition-all peer-placeholder-shown:top-2.5 peer-placeholder-shown:text-sm peer-placeholder-shown:font-normal peer-autofill:-top-2 peer-hover:text-opacity-90 peer-focus:-top-2 peer-focus:cursor-default peer-focus:text-opacity-100"
			>
				{ label }
			</label>
		}
		<i class="ph-bold ph-caret-down pointer-events-none absolute right-2.5 top-3.5 text-sm"></i>
	</div>
}

script MultiSelectInputLocalState() {
	document.addEventListener('alpine:init', () => {
		Alpine.data('multiSelectInput', () => ({
			getFormattedSelectedItems(bindSelectedItemsPath) {
				if (bindSelectedItemsPath.length == 0) {
					return '--';
				}

				let formattedSelectedItems = bindSelectedItemsPath.join(', ');
				if (formattedSelectedItems.length > 80) {
					return formattedSelectedItems.substr(0, 80) + '...';
				}
				return formattedSelectedItems;
			},
			shouldExpandOptions: false,
			closeDropdown() {
				this.shouldExpandOptions = false;
			},
			toggleDropdownDisplay() {
				if (this.shouldExpandOptions) {
					this.closeDropdown();
					return;
				}

				this.shouldExpandOptions = true;
			},
		}));
	});
}

templ MultiSelectInput(
	id, label, bindModelPath string,
	options []string,
) {
	<!-- MultiSelectInput -->
	@MultiSelectInputLocalState()
	<div
		class="relative w-full"
		x-data="multiSelectInput"
		@click.away="closeDropdown()"
	>
		<div
			@click="toggleDropdownDisplay()"
			class="border-os-200 hover:border-os-100 bg-os-300 autofill:bg-os-300 pt-2.3 peer relative h-10 w-full appearance-none rounded-md border px-3 text-sm text-neutral-100 placeholder-transparent outline-none transition-all"
		>
			<label
				class="cursor-pointer text-neutral-100"
				x-text={ "getFormattedSelectedItems(" + bindModelPath + ")" }
			></label>
		</div>
		<label class="from-os-300 via-os-300 absolute -top-2 left-1.5 cursor-text bg-gradient-to-t to-transparent to-50% px-1.5 text-xs font-bold text-neutral-50 text-opacity-80">
			{ label }
		</label>
		<i class="ph-bold ph-caret-down pointer-events-none absolute right-2.5 top-3.5 text-sm"></i>
		<div x-show="shouldExpandOptions" class="bg-os-500 border-os-200 rounded-b-md border">
			for _, option := range options {
				<div class="px-3 pb-1.5 pt-1">
					<label class="inline-flex w-full cursor-pointer items-center">
						<span class="text-sm text-neutral-50">{ option }</span>
						<input
							type="checkbox"
							id={ id }
							name={ id }
							value={ option }
							x-model={ bindModelPath }
							class="peer sr-only"
						/>
						<div class="h-4.5 peer-checked:bg-infinite-500 peer relative ml-auto w-8 rounded-full bg-gray-400 after:absolute after:start-[2px] after:top-0.5 after:h-3.5 after:w-3.5 after:rounded-full after:border after:bg-white after:transition-all after:content-[''] peer-checked:after:translate-x-full peer-checked:after:border-white"></div>
					</label>
				</div>
			}
		</div>
	</div>
}
