package componentStructural

templ RegularModal(title, isOpenState, closeModalFunction, elementIdStatePath string) {
	<!-- RegularModal -->
	<div
		x-show={ isOpenState }
		x-transition:enter="transition ease-out duration-500"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition ease-in duration-150"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
		class="fixed left-0 top-0 z-50 mx-auto h-screen max-h-screen w-full overflow-y-auto overflow-x-hidden bg-neutral-950 bg-opacity-50"
	>
		{{ regularModalClasses := "'bg-os-400 relative rounded-md p-6 drop-shadow-xl'" }}
		{{ regularModalClasses += "+ (isFullScreenActive ? ' w-full h-full' : ' max-w-3/5 mx-auto mt-20 xl:mt-24 xl:max-w-3xl')" }}
		<div x-data="{ isFullScreenActive: false }" :class={ regularModalClasses }>
			<div class="mb-6 flex justify-between align-middle">
				<h2 class="text-2xl">
					{ title }
					if elementIdStatePath != "" {
						<strong>#<span x-text={ elementIdStatePath }></span></strong>
					}
				</h2>
				<div class="inline-flex space-x-2 bg-inherit">
					<div x-show="!isFullScreenActive">
						@CircularIconButtonWithTooltip(
							"ph-arrows-out", "os-200", "os-100",
							"isFullScreenActive = true", "", "",
						)
					</div>
					<div x-show="isFullScreenActive">
						@CircularIconButtonWithTooltip(
							"ph-arrows-in", "os-200", "os-100",
							"isFullScreenActive = false", "", "",
						)
					</div>
					@CircularIconButtonWithTooltip(
						"ph-x", "os-200", "os-100",
						closeModalFunction+"; setTimeout(() => isFullScreenActive = false, 150)", "", "",
					)
				</div>
			</div>
			{ children... }
		</div>
	</div>
}
