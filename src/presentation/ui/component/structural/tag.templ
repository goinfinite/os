package componentStructural

templ Tag(highlightedIcon, highlightedLabel, tagValue, tagColor string) {
	<!-- Tag -->
	<div class={ "flex rounded-md border-solid border-2.5 border-" + tagColor + " text-sm w-fit" }>
		<div class={ "bg-" + tagColor + " flex items-center" }>
			<div class="flex items-center px-1">
				if highlightedIcon != "" {
					<i class={ "ph-duotone " + highlightedIcon + " text-lg" }></i>
				}
				if highlightedLabel != "" {
					<span class="max-w-64 truncate">{ highlightedLabel }</span>
				}
			</div>
		</div>
		<span class={ "leading-normal ring-" + tagColor + " ring-offset-" + tagColor + " rounded-md px-1 py-0.5 ring-1 ring-offset-1 max-w-64 truncate" }>
			@templ.Raw(tagValue)
		</span>
	</div>
}

type TagWithFilterDto struct {
	HighlightedIcon  string
	HighlightedLabel string
	TagValue         string
	TagColor         string
	FilterValue      string
	FilterBindPath   string
}

templ TagWithFilter(tagWithFilterDto TagWithFilterDto) {
	<!-- TagWithFilter -->
	<div class={ "flex rounded-md border-solid border-2.5 border-" + tagWithFilterDto.TagColor + " text-sm" }>
		<div class={ "bg-" + tagWithFilterDto.TagColor + " flex items-center" }>
			<div class="flex items-center px-1">
				if tagWithFilterDto.HighlightedIcon != "" {
					<i class={ "ph-duotone " + tagWithFilterDto.HighlightedIcon + " text-lg" }></i>
				}
				if tagWithFilterDto.HighlightedLabel != "" {
					<span class="max-w-64 truncate">{ tagWithFilterDto.HighlightedLabel }</span>
				}
			</div>
		</div>
		<span class={ "leading-normal ring-" + tagWithFilterDto.TagColor + " ring-offset-" + tagWithFilterDto.TagColor + " rounded-md px-1 py-0.5 ring-1 ring-offset-1 max-w-64 truncate" }>
			@templ.Raw(tagWithFilterDto.TagValue)
			<i class="bg-os-200 ph-bold ph-funnel hover:bg-infinite-200 ml-1 cursor-pointer rounded-xl p-1 text-[10px] transition-all" @click={ tagWithFilterDto.FilterBindPath + " = '" + tagWithFilterDto.FilterValue + "'" }></i>
		</span>
	</div>
}

type TinyTagDto struct {
	HighlightedIcon  string
	HighlightedLabel string
	TagValue         string
	TagColor         string
}

templ TinyTag(tinyTagDto TinyTagDto) {
	<!-- TinyTag -->
	<div class={ "flex w-fit rounded-md ring-1.5 text-xs ring-" + tinyTagDto.TagColor }>
		<div class={ "bg-" + tinyTagDto.TagColor + " flex items-center rounded-l-md" }>
			<div class="flex items-center px-1 leading-normal">
				if tinyTagDto.HighlightedIcon != "" {
					<i class={ "ph-bold " + tinyTagDto.HighlightedIcon + " text-base" }></i>
				}
				if tinyTagDto.HighlightedLabel != "" {
					<span class="max-w-64 truncate">{ tinyTagDto.HighlightedLabel }</span>
				}
			</div>
		</div>
		<span class={ "ring-" + tinyTagDto.TagColor + " leading-loose rounded-r-md px-1 ring-1 max-w-64 truncate text-xs" }>
			@templ.Raw(tinyTagDto.TagValue)
		</span>
	</div>
}
