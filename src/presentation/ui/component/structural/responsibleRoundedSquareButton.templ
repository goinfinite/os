package componentStructural

type ResponsibleRoundedSquareButtonDto struct {
	Icon                      string
	TextContent               string
	DefaultColor              string
	HoverColor                string
	OnClick                   string
	HideTextBelowBreakpoint   string
	DeactivateButtonCondition string
}

templ ResponsibleRoundedSquareButton(inputDto ResponsibleRoundedSquareButtonDto) {
	<!-- ResponsibleRoundedSquareButton -->
	<div class="group/responsibleRoundedSquareButton relative w-fit">
		<button
			type="button"
			@click={ inputDto.OnClick }
			class={ "inline-flex items-center gap-1.5 px-3 py-2 rounded-md bg-" + inputDto.DefaultColor + " text-center hover:bg-" + inputDto.HoverColor }
			if inputDto.DeactivateButtonCondition != "" {
				:disabled={ inputDto.DeactivateButtonCondition }
			}
		>
			{{
				bindIconClasses := "'ph-duotone " + inputDto.Icon + " text-xl'"
				if inputDto.DeactivateButtonCondition != "" {
					bindIconClasses += "+ (" + inputDto.DeactivateButtonCondition + " ? ' text-gray-500 ' : '')"
				}
			}}
			<i :class={ bindIconClasses }></i>
			<span class={ "font-medium max-[" + inputDto.HideTextBelowBreakpoint + "]:hidden" }>{ inputDto.TextContent }</span>
			<div class={ "absolute left-1/2 transform -translate-x-1/2 invisible bottom-full mb-2 transition-all duration-300 group-hover/responsibleRoundedSquareButton:max-[" + inputDto.HideTextBelowBreakpoint + "]:block group-hover/responsibleRoundedSquareButton:max-[" + inputDto.HideTextBelowBreakpoint + "]:-translate-y-0.5 group-hover/responsibleRoundedSquareButton:max-[" + inputDto.HideTextBelowBreakpoint + "]:visible p-1.5 bg-" + inputDto.HoverColor + " text-neutral-50 text-xs rounded-md shadow-md w-max" }>
				{ inputDto.TextContent }
			</div>
		</button>
	</div>
}
