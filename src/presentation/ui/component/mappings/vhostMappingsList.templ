package componentMappings

import (
	"github.com/goinfinite/os/src/domain/entity"
	"github.com/goinfinite/os/src/domain/valueObject"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
	"github.com/goinfinite/ui/src/display"
)

templ VirtualHostMappingsList(
	mappingEntity entity.Mapping,
	rootDirectory valueObject.UnixFilePath,
) {
	<!-- VirtualHostMappingsList -->
	<div class="flex w-full items-center justify-between rounded-md bg-neutral-500/5 p-3">
		@templ.JSONScript("mappingEntity_"+mappingEntity.Id.String(), mappingEntity)
		<div class="flex items-center gap-3">
			<p>{ mappingEntity.Path.String() }</p>
			switch mappingEntity.TargetType.String() {
				case "service":
					@uiDisplay.Tag(uiDisplay.TagSettings{
						Size:                 uiDisplay.TagSizeXs,
						OuterBackgroundColor: "teal-950",
						OuterLeftLabel:       "service",
						InnerLabel:           mappingEntity.TargetValue.String(),
					})
				case "url":
					@uiDisplay.Tag(uiDisplay.TagSettings{
						Size:                 uiDisplay.TagSizeXs,
						OuterBackgroundColor: "violet-950",
						OuterLeftLabel:       "url",
						InnerLabel:           mappingEntity.TargetValue.String(),
					})
					if mappingEntity.TargetHttpResponseCode != nil &&
					mappingEntity.TargetHttpResponseCode.String() != "301" &&
					mappingEntity.TargetHttpResponseCode.String() != "302" {
						@uiDisplay.Tag(uiDisplay.TagSettings{
							Size:                 uiDisplay.TagSizeXs,
							OuterBackgroundColor: "cyan-950",
							OuterLeftLabel:       "responseCode",
							InnerLabel:           mappingEntity.TargetHttpResponseCode.String(),
						})
					}
				case "response-code":
					@uiDisplay.Tag(uiDisplay.TagSettings{
						Size:                 uiDisplay.TagSizeXs,
						OuterBackgroundColor: "cyan-950",
						OuterLeftLabel:       "responseCode",
						InnerLabel:           mappingEntity.TargetHttpResponseCode.String(),
					})
				case "inline-html":
					{{ inlineHtmlValue := mappingEntity.TargetValue.String() }}
					if len(mappingEntity.TargetValue.String()) > 50 {
						{{ inlineHtmlValue = mappingEntity.TargetValue.String()[:50] + "..." }}
					}
					@uiDisplay.Tag(uiDisplay.TagSettings{
						Size:                 uiDisplay.TagSizeXs,
						OuterBackgroundColor: "stone-700",
						OuterLeftLabel:       "inlineHtml",
						InnerLabel:           inlineHtmlValue,
					})
				case "static-files":
					@uiDisplay.Tag(uiDisplay.TagSettings{
						Size:                 uiDisplay.TagSizeXs,
						OuterBackgroundColor: "yellow-700",
						OuterLeftLabel:       "staticFiles",
						InnerLabel:           rootDirectory.String(),
					})
			}
			if mappingEntity.MatchPattern != valueObject.MappingMatchPatternBeginsWith {
				@uiDisplay.Tag(uiDisplay.TagSettings{
					Size:                 uiDisplay.TagSizeXs,
					OuterRingColor:       "neutral-400",
					OuterRingThickness:   uiDisplay.TagRingThicknessXs,
					OuterBackgroundColor: "transparent",
					OuterTextColor:       "neutral-400",
					OuterLeftIcon:        "ph-map-pin",
					InnerLabel:           mappingEntity.MatchPattern.String(),
				})
			}
			if mappingEntity.MarketplaceInstalledItemName != nil {
				@uiDisplay.Tag(uiDisplay.TagSettings{
					Size:                 uiDisplay.TagSizeXs,
					OuterRingColor:       "amber-500",
					OuterRingThickness:   uiDisplay.TagRingThicknessXs,
					OuterBackgroundColor: "transparent",
					OuterTextColor:       "amber-500",
					OuterLeftIcon:        "ph-storefront",
					InnerLabel:           mappingEntity.MarketplaceInstalledItemName.String() + " (#" + mappingEntity.MarketplaceInstalledItemId.String() + ")",
				})
			}
			if mappingEntity.ShouldUpgradeInsecureRequests != nil && *mappingEntity.ShouldUpgradeInsecureRequests {
				@uiDisplay.Tag(uiDisplay.TagSettings{
					Size:                 uiDisplay.TagSizeXs,
					OuterRingColor:       "lime-700",
					OuterRingThickness:   uiDisplay.TagRingThicknessXs,
					OuterBackgroundColor: "transparent",
					OuterTextColor:       "lime-700",
					OuterLeftIcon:        "ph-lock",
					InnerLabel:           "httpsOnly",
				})
			}
			if mappingEntity.MappingSecurityRuleId != nil {
				@uiDisplay.Tag(uiDisplay.TagSettings{
					Size:                 uiDisplay.TagSizeXs,
					OuterRingColor:       "red-600",
					OuterRingThickness:   uiDisplay.TagRingThicknessXs,
					OuterBackgroundColor: "transparent",
					OuterTextColor:       "red-600",
					OuterLeftIcon:        "ph-shield",
					InnerLabel:           "#" + mappingEntity.MappingSecurityRuleId.String(),
				})
			}
		</div>
		<div class="flex gap-2">
			@componentStructural.CircularIconButtonWithTooltip(
				"ph-pencil", "neutral-50/10", "neutral-50/30",
				"openUpdateMappingModal('"+mappingEntity.Id.String()+"')", "update",
				"neutral-50/10",
			)
			@componentStructural.CircularIconButtonWithTooltip(
				"ph-trash", "red-800", "red-600",
				"openDeleteMappingModal('"+mappingEntity.Id.String()+"', '"+mappingEntity.Path.String()+"')",
				"delete", "red-500",
			)
		</div>
	</div>
}
