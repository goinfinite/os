package componentMappings

import (
	"github.com/goinfinite/os/src/domain/valueObject"
	componentForm "github.com/goinfinite/os/src/presentation/ui/component/form"
	componentStructural "github.com/goinfinite/os/src/presentation/ui/component/structural"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"strings"
)

func transformMappingTypeIntoLabelFormat(mappingType string) string {
	typeWithoutHyphen := strings.ReplaceAll(mappingType, "-", " ")
	upperCaser := cases.Title(language.English)
	return upperCaser.String(typeWithoutHyphen)
}

templ MappingTypeRadioInput(id, label, bindModelPath string) {
	<!-- MappingTypeSelectInput -->
	<div class="-mb-3 -ml-1 flex justify-start gap-4">
		for _, mappingType := range valueObject.ValidMappingTargetTypes {
			@componentForm.RadioInput(
				"targetType", transformMappingTypeIntoLabelFormat(mappingType),
				mappingType, bindModelPath,
			)
		}
	</div>
	<div x-show={ bindModelPath + " == 'url'" }>
		@componentStructural.Alert("info", "Set up direct redirects to an URL.")
	</div>
	<div x-show={ bindModelPath + " == 'service'" }>
		@componentStructural.Alert("info", "Configure a service to handle the incoming requests, such as a web server, REST API, or a gRPC service.")
	</div>
	<div x-show={ bindModelPath + " == 'response-code'" }>
		@componentStructural.Alert("info", "Define custom responses for different HTTP status codes, such as 404 (Not Found) or 500 (Internal Server Error).")
	</div>
	<div x-show={ bindModelPath + " == 'inline-html'" }>
		@componentStructural.Alert("info", "Send a specific HTTP status code along with HTML content in the server's response.")
	</div>
	<div x-show={ bindModelPath + " == 'static-files'" }>
		@componentStructural.Alert("info", "Set the root directory to make static files accessible. The server will attempt to locate files in various locations until it finds one that exists.")
	</div>
}
